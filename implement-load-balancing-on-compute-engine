Set the region and zone
Run the following command to set the project region for this lab:
gcloud config set compute/region us-central1
Copied!
To create a variable for region, run the following command:
export REGION=us-central1
Copied!
Run the following command to create a variable for the zone:
export ZONE=us-central1-c
Copied!
Learn more from the Regions and zones documentation.

Note: When you run gcloud on your own machine, the config settings are persisted across sessions. But in Cloud Shell, you need to set this for every new session or reconnection.
Task 1. Create a new instance from the Cloud console
In this section, you create new predefined machine types with Compute Engine from the Cloud console.

In the Cloud console, on the Navigation menu (â˜°), click Compute Engine > VM Instances.

This may take a minute to initialize for the first time.

To create a new instance, click Create Instance.

In the Machine configuration:

Enter the values for the following fields:

Field Value Additional Information
Name gcelab Name for the VM instance
Region us-central1 For more information about regions, see the Compute Engine guide, Regions and Zones.
Zone us-central1-c Note: Remember the zone that you selected to use later. For more information about zones, see the Compute Engine guide, Regions and Zones.
Series E2
Machine Type e2-medium This is an e2-medium, 2-CPU, 4GB RAM instance. Several machine types are available, ranging from micro instance types to 32-core/208GB RAM instance types. For more information, see the Compute Engine guide, About machine families.
Note: A new project has a default resource quota , which may limit the number of CPU cores. You can request more when you work on projects outside this lab.
Click OS and storage.

Click Change to begin configuring your boot disk and select the values for:

Operating system: Debian
Version: Debian GNU/Linux 11 (bullseye)
Boot disk type: Balanced persistent disk
Size: 10 GB
Several images are available, including Debian, Ubuntu, CoreOS, and premium images such as Red Hat Enterprise Linux and Windows Server. For more information, see the Operating System documentation.

Click Networking.

Firewall: Allow HTTP traffic
Select this option in order to access a web server that you install later.

Note: This automatically creates a firewall rule to allow HTTP traffic on port 80.
Once all sections are configured, scroll down and click Create to launch your new virtual machine instance.

It should take about a minute for the VM, gcelab, to be created. After gcelab is created, the VM Instances page lists it in the VM instances list.

To use SSH to connect to the VM, click SSH to the right of the instance name, gcelab.

This launches an SSH client directly from your browser.

Note: Learn more about how to use SSH to connect to an instance from the Compute Engine guide, Connect to Linux VMs using Google tools .
Task 2. Install an NGINX web server
Now you install an NGINX web server, one of the most popular web servers in the world, to connect your VM to something.

Run the following command to update the OS:

sudo apt-get update
Copied!
Expected output:

Get:1 file:/etc/apt/mirrors/debian.list Mirrorlist [30 B]
Get:5 file:/etc/apt/mirrors/debian-security.list Mirrorlist [39 B]
Get:7 https://packages.cloud.google.com/apt google-compute-engine-bookworm-stable InRelease [1321 B]
Get:2 https://deb.debian.org/debian bookworm InRelease [151 kB]  
Get:3 https://deb.debian.org/debian bookworm-updates InRelease [55.4 kB]
Get:4 https://deb.debian.org/debian bookworm-backports InRelease [59.0 kB]
Hit:8 https://packages.cloud.google.com/apt cloud-sdk-bookworm InRelease
Hit:6 https://deb.debian.org/debian-security bookworm-security InRelease
Fetched 267 kB in 1s (274 kB/s)
Reading package lists... Done
Run the following command to install NGINX:

sudo apt-get install -y nginx
Copied!
Expected output:

Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
...
Run the following command to confirm that NGINX is running:

ps auwx | grep nginx
Copied!
Expected output:

root 2330 0.0 0.0 159532 1628 ? Ss 14:06 0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
www-data 2331 0.0 0.0 159864 3204 ? S 14:06 0:00 nginx: worker process
www-data 2332 0.0 0.0 159864 3204 ? S 14:06 0:00 nginx: worker process
root 2342 0.0 0.0 12780 988 pts/0 S+ 14:07 0:00 grep nginx
To see the web page, return to the Cloud console and click the External IP link in the row for your machine, or add the External IP value to http://EXTERNAL_IP/ in a new browser window or tab.

A default web page should open that says: Welcome to nginx!

## Task 3. Create a new instance with gcloud

In Cloud Shell, run the following gcloud command to create a new VM instance from the command line:

gcloud compute instances create gcelab2 --machine-type e2-medium --zone=$ZONE
Copied!
Expected output:

     Created [...gcelab2].
     NAME: gcelab2
     ZONE: us-central1-c
     MACHINE_TYPE: e2-medium
     PREEMPTIBLE:
     INTERNAL_IP: 10.128.0.3
     EXTERNAL_IP: 34.136.51.150
     STATUS: RUNNING

The new instance has these default values:

The Debian 11 (bullseye) image.
The e2-medium machine type.
A root persistent disk with the same name as the instance; the disk is automatically attached to the instance.
When working in your own project, you can specify a custom machine type.

To see all the defaults, run the following command:

gcloud compute instances create --help
Copied!
Note: You can set the default region and zones that gcloud uses if you are always working within one region/zone and you don't want to append the --zone flag every time.
To do this, run these commands:

gcloud config set compute/zone ...

gcloud config set compute/region ...

To exit help, press CTRL+C.

In the Cloud console, on the Navigation menu (Navigation menu icon), click Compute Engine > VM instances. Or if you still had the VM instances page open, just click Refresh. Your two new instances should be listed.

You can also use SSH to connect to your instance via gcloud. Make sure to add your zone, or omit the --zone flag if you've set the option globally:

gcloud compute ssh gcelab2 --zone=us-central1-c
Copied!
Enter Y to continue.

Do you want to continue? (Y/n)
Press Enter through the passphrase section to leave the passphrase empty.

Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase)
After connecting, disconnect from SSH by exiting from the remote shell with the command that follows:

exit

////////

Getting started with cloud shell and gcloud:

Set the region to <REGION>

gcloud config set compute/region REGION
Copied!
To view the project region setting, run the following command:

gcloud config get-value compute/region
Copied!
Set the zone to <ZONE>:

gcloud config set compute/zone ZONE
Copied!
To view the project zone setting, run the following command:

gcloud config get-value compute/zone
Copied!

In Cloud Shell, run the following gcloud command, to view the project id for your project:

gcloud config get-value project
Copied!
In Cloud Shell, run the following gcloud command to view details about the project:

gcloud compute project-info describe --project $(gcloud config get-value project)
Copied!
Find the zone and region metadata values in the output. You'll use the zone (google-compute-default-zone) from the output later in this lab.

Note: When the google-compute-default-region and google-compute-default-zone keys and values are missing from the output, no default zone or region is set. The output includes other useful information regarding your project. Take some time to explore this in more detail.

Setting environment variables
Environment variables define your environment and help save time when you write scripts that contain APIs or executables.

Create an environment variable to store your Project ID:

export PROJECT_ID=$(gcloud config get-value project)
Copied!
Create an environment variable to store your Zone:

export ZONE=$(gcloud config get-value compute/zone)
Copied!
To verify that your variables were set properly, run the following commands:

echo -e "PROJECT ID: $PROJECT_ID\nZONE: $ZONE"
Copied!
If the variables were set correctly, the echo commands will output your Project ID and Zone.

Creating a virtual machine with the gcloud tool
Use the gcloud tool to create a new virtual machine (VM) instance.

To create your VM, run the following command:

gcloud compute instances create gcelab2 --machine-type e2-medium --zone $ZONE
Copied!
Output:

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-04-326fae68bc3d/zones/us-east1-c/instances/gcelab2].
NAME ZONE MACHINE_TYPE PREEMPTIBLE INTERNAL_IP EXTERNAL_IP STATUS
gcelab2 ZONE e2-medium 10.128.0.2 34.67.152.90 RUNNING
Command details

gcloud compute allows you to manage your Compute Engine resources in a format that's simpler than the Compute Engine API.
instances create creates a new instance.
gcelab2 is the name of the VM.
The --machine-type flag specifies the machine type as e2-medium.
The --zone flag specifies where the VM is created.
If you omit the --zone flag, the gcloud tool can infer your desired zone based on your default properties. Other required instance settings, such as machine type and image, are set to default values if not specified in the create command.

Exploring gcloud commands
The gcloud tool offers simple usage guidelines that are available by adding the -h flag (for help) onto the end of any gcloud command.

Run the following command:

gcloud -h
Copied!
You can access more verbose help by appending the --help flag onto a command or running the gcloud help command.

Run the following command:

gcloud config --help
Copied!
To exit type Q and hit Enter.

Run the following command:

gcloud help config
Copied!
The results of the gcloud config --help and gcloud help config commands are equivalent. Both return long, detailed help.

There are global flags in gcloud that govern the behavior of commands on a per-invocation level. Flags override any values set in SDK properties.

View the list of configurations in your environment:

gcloud config list
Copied!
To see all properties and their settings:

gcloud config list --all
Copied!
List your components:

gcloud components list
Copied!
This command displays the gcloud components that are ready for you to use in this lab.

Task 2. Filtering command-line output
The gcloud command-line interface (CLI) is a powerful tool for working at the command line. You may want specific information to be displayed.

List the compute instance available in the project:

gcloud compute instances list
Copied!
Note: Having multiple resources deployed in a project is very common. Fortunately gcloud has some clever formatting that can help identify specific resources.
Example Output:

NAME: gcelab2
ZONE: ZONE
MACHINE_TYPE: e2-medium
PREEMPTIBLE:
INTERNAL_IP: 10.142.0.2
EXTERNAL_IP: 35.237.43.111
STATUS: RUNNING
List the gcelab2 virtual machine:

gcloud compute instances list --filter="name=('gcelab2')"
Copied!
Example Output:

NAME: gcelab2
ZONE: ZONE
MACHINE_TYPE: e2-medium
PREEMPTIBLE:
INTERNAL_IP: 10.142.0.2
EXTERNAL_IP: 35.237.43.111
STATUS: RUNNING
In the above command, you asked gcloud to only show the information matching the criteria i.e. a virtual instance name matching the criteria.

Note: Your output format may differ from the one provided in the lab manual.
List the firewall rules in the project:

gcloud compute firewall-rules list
Copied!
Output:

NAME NETWORK DIRECTION PRIORITY ALLOW DENY DISABLED
default-allow-icmp default INGRESS 65534 icmp False
default-allow-internal default INGRESS 65534 tcp:0-65535,udp:0-65535,icmp False
default-allow-rdp default INGRESS 65534 tcp:3389 False
default-allow-ssh default INGRESS 65534 tcp:22 False
dev-net-allow-ssh dev-network INGRESS 1000 tcp:22 False
serverless-to-vpc-connector dev-network INGRESS 1000 icmp,udp:665-666,tcp:667 False
vpc-connector-egress dev-network INGRESS 1000 icmp,udp,tcp False
vpc-connector-health-check dev-network INGRESS 1000 tcp:667 False
vpc-connector-to-serverless dev-network EGRESS 1000 icmp,udp:665-666,tcp:667 False
List the firewall rules for the default network:

gcloud compute firewall-rules list --filter="network='default'"
Copied!
Output:

NAME NETWORK DIRECTION PRIORITY ALLOW DENY DISABLED
default-allow-icmp default INGRESS 65534 icmp False
default-allow-internal default INGRESS 65534 tcp:0-65535,udp:0-65535,icmp False
default-allow-rdp default INGRESS 65534 tcp:3389 False
default-allow-ssh default INGRESS 65534 tcp:22 False
List the firewall rules for the default network where the allow rule matches an ICMP rule:

gcloud compute firewall-rules list --filter="NETWORK:'default' AND ALLOW:'icmp'"
Copied!
Output:

NAME NETWORK DIRECTION PRIORITY ALLOW DENY DISABLED
default-allow-icmp default INGRESS 65534 icmp False
default-allow-internal default INGRESS 65534 tcp:0-65535,udp:0-65535,icmp False
Task 3. Connecting to your VM instance
gcloud compute makes connecting to your instances easy. The gcloud compute ssh command provides a wrapper around SSH, which takes care of authentication and the mapping of instance names to IP addresses.

To connect to your VM with SSH, run the following command:

gcloud compute ssh gcelab2 --zone $ZONE
Copied!
Output:

WARNING: The public SSH key file for gcloud does not exist.
WARNING: The private SSH key file for gcloud does not exist.
WARNING: You do not have an SSH key for gcloud.
WARNING: [/usr/bin/ssh-keygen] will be executed to generate a key.
This tool needs to create the directory
[/home/gcpstaging306_student/.ssh] before being able to generate SSH Keys.
Do you want to continue? (Y/n)
To continue, type Y.

Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase)
To leave the passphrase empty, press Enter twice.

Note: You have connected to the virtual machine created earlier in the lab. Did you notice how the command prompt changed?
The prompt now says something similar to sa_107021519685252337470@gcelab2.
The reference before the @ indicates the account being used.
After the @ sign indicates the host machine being accessed.
Install nginx web server on to virtual machine:

sudo apt install -y nginx
Copied!
You don't need to do anything here. To disconnect from SSH and exit the remote shell, run the following command:

exit
Copied!
You should be back at your project's command prompt.

Task 4. Updating the firewall
When using compute resources such as virtual machines, it's important to understand the associated firewall rules.

List the firewall rules for the project:

gcloud compute firewall-rules list
Copied!
Output:

NAME NETWORK DIRECTION PRIORITY ALLOW DENY DISABLED
default-allow-icmp default INGRESS 65534 icmp False
default-allow-internal default INGRESS 65534 tcp:0-65535,udp:0-65535,icmp False
default-allow-rdp default INGRESS 65534 tcp:3389 False
default-allow-ssh default INGRESS 65534 tcp:22 False
dev-net-allow-ssh dev-network INGRESS 1000 tcp:22 False
serverless-to-vpc-connector dev-network INGRESS 1000 icmp,udp:665-666,tcp:667 False
vpc-connector-egress dev-network INGRESS 1000 icmp,udp,tcp False
vpc-connector-health-check dev-network INGRESS 1000 tcp:667 False
vpc-connector-to-serverless dev-network EGRESS 1000 icmp,udp:665-666,tcp:667 False
From the above you can see there are two networks available. The default network is where the virtual machine gcelab2 is located.

Try to access the nginx service running on the gcelab2 virtual machine.

Note: Communication with the virtual machine will fail as it does not have an appropriate firewall rule. The nginx web server is expecting to communicate on tcp:80. To get communication working you need to:

Add a tag to the gcelab2 virtual machine
Add a firewall rule for http traffic
Add a tag to the virtual machine:

gcloud compute instances add-tags gcelab2 --tags http-server,https-server
Copied!
Update the firewall rule to allow:

gcloud compute firewall-rules create default-allow-http --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server

List the firewall rules for the project:

gcloud compute firewall-rules list --filter=ALLOW:'80'
Copied!
Output:

NAME NETWORK DIRECTION PRIORITY ALLOW DENY DISABLED
default-allow-http default INGRESS 1000 tcp:80 False
Verify communication is possible for http to the virtual machine:

curl http://$(gcloud compute instances list --filter=name:gcelab2 --format='value(EXTERNAL_IP)')
Copied!
You will see the default nginx output.

Task 5. Viewing the system logs
Viewing logs is essential to understanding the working of your project. Use gcloud to access the different logs available on Google Cloud.

View the available logs on the system:

gcloud logging logs list
Copied!
Output:

NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/GCEGuestAgent
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/OSConfigAgent
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/autoscaler.googleapis.com%2Fstatus_change
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/cloudaudit.googleapis.com%2Factivity
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/cloudaudit.googleapis.com%2Fdata_access
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/cloudaudit.googleapis.com%2Fsystem_event
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/compute.googleapis.com%2Fautoscaler
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/compute.googleapis.com%2Finstance_group_manager_events
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/compute.googleapis.com%2Fshielded_vm_integrity
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/run.googleapis.com%2Fstderr
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/run.googleapis.com%2Fstdout
View the logs that relate to compute resources:

gcloud logging logs list --filter="compute"
Copied!
Output:

NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/compute.googleapis.com%2Fautoscaler
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/compute.googleapis.com%2Finstance_group_manager_events
NAME: projects/qwiklabs-gcp-01-4b75909db302/logs/compute.googleapis.com%2Fshielded_vm_integrity
Read the logs related to the resource type of gce_instance:

gcloud logging read "resource.type=gce_instance" --limit 5
Copied!
Read the logs for a specific virtual machine:

gcloud logging read "resource.type=gce_instance AND labels.instance_name='gcelab2'" --limit 5
Copied!

////////////////
Set Up Network and Application Load Balancers

Overview
In this hands-on lab you learn the differences between a Network Load Balancer and an Application Load Balancer, and how to set them up for your applications running on Compute Engine virtual machines (VMs).

There are several ways you can load balance on Google Cloud. This lab takes you through the setup of the following load balancers:

Network Load Balancer
Application Load Balancer
You are encouraged to type the commands yourself, which can help you learn the core concepts. Many labs include a code block that contains the required commands. You can easily copy and paste the commands from the code block into the appropriate places during the lab.

Objectives
In this lab, you learn how to perform the following tasks:

Configure the default region and zone for your resources.
Create multiple web server instances.
Configure a load balancing service.
Create an Application Load Balancer.

Task 1. Set the default region and zone for all resources
Set the default region:

gcloud config set compute/region Region
Copied!
In Cloud Shell, set the default zone:

gcloud config set compute/zone Zone
Copied!
Learn more about choosing zones and regions in Compute Engine's Regions and zones documentation.

Task 2. Create multiple web server instances
For this load balancing scenario, you create three Compute Engine VM instances and install Apache on them, then add a firewall rule that allows HTTP traffic to reach the instances.

The code provided sets the zone to Zone. Setting the tags field lets you reference these instances all at once, such as with a firewall rule. These commands also install Apache on each instance and give each instance a unique home page.

Create a virtual machine, www1, in your default zone using the following code:

gcloud compute instances create www1 \
 --zone=Zone \
 --tags=network-lb-tag \
 --machine-type=e2-small \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
service apache2 restart
echo "

<h3>Web Server: www1</h3>" | tee /var/www/html/index.html'
Copied!
Create a virtual machine, www2, in your default zone using the following code:

gcloud compute instances create www2 \
 --zone=Zone \
 --tags=network-lb-tag \
 --machine-type=e2-small \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
service apache2 restart
echo "

<h3>Web Server: www2</h3>" | tee /var/www/html/index.html'
Copied!
Create a virtual machine, www3, in your default zone.

gcloud compute instances create www3 \
 --zone=Zone \
 --tags=network-lb-tag \
 --machine-type=e2-small \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
service apache2 restart
echo "

<h3>Web Server: www3</h3>" | tee /var/www/html/index.html'
Copied!
Create a firewall rule to allow external traffic to the VM instances:

gcloud compute firewall-rules create www-firewall-network-lb \
 --target-tags network-lb-tag --allow tcp:80
Copied!
Now you need to get the external IP addresses of your instances and verify that they are running.

Run the following to list your instances. You'll see their IP addresses in the EXTERNAL_IP column:

gcloud compute instances list
Copied!
Verify that each instance is running with curl, replacing [IP_ADDRESS] with the external IP address for each of your VMs:

curl http://[IP_ADDRESS]
Copied!
Click Check my progress to verify that you've created a group of web servers.
Create multiple web server instances

Task 3. Configure the load balancing service
When you configure the load balancing service, your virtual machine instances receives packets that are destined for the static external IP address you configure. Instances made with a Compute Engine image are automatically configured to handle this IP address.

Note: Learn more about how to set up Network Load Balancing from the Backend service-based external passthrough Network Load Balancer overview guide.
Create a static external IP address for your load balancer:

gcloud compute addresses create network-lb-ip-1 \
 --region Region
Copied!
Output:

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-xxxxxxxxxxx/regions//addresses/network-lb-ip-1].
Add a legacy HTTP health check resource:

gcloud compute http-health-checks create basic-check
Copied!
Add a target pool in the same region as your instances. Run the following to create the target pool and use the health check, which is required for the service to function:

gcloud compute target-pools create www-pool \
 --region Region --http-health-check basic-check
Copied!
Add the instances to the pool:

gcloud compute target-pools add-instances www-pool \
 --instances www1,www2,www3
Copied!
Add a forwarding rule:

gcloud compute forwarding-rules create www-rule \
 --region Region \
 --ports 80 \
 --address network-lb-ip-1 \
 --target-pool www-pool
Copied!
Click Check my progress to verify that you've created an L4 Network Load Balancer that points to the web servers.
Configure the load balancing service

Task 4. Send traffic to your instances
Now that the load balancing service is configured, you can start sending traffic to the forwarding rule and watch the traffic be dispersed to different instances.

Enter the following command to view the external IP address of the www-rule forwarding rule used by the load balancer:

gcloud compute forwarding-rules describe www-rule --region Region
Copied!
Access the external IP address:

IPADDRESS=$(gcloud compute forwarding-rules describe www-rule --region Region --format="json" | jq -r .IPAddress)
Copied!
Show the external IP address:

echo $IPADDRESS
Copied!
Use the curl command to access the external IP address, replacing IP_ADDRESS with an external IP address from the previous command:

while true; do curl -m1 $IPADDRESS; done
Copied!
The response from the curl command alternates randomly among the three instances. If your response is initially unsuccessful, wait approximately 30 seconds for the configuration to be fully loaded and for your instances to be marked healthy before trying again.

Use Ctrl + C to stop running the command.

Task 5. Create an Application Load Balancer
Application Load Balancing is implemented on Google Front End (GFE). GFEs are distributed globally and operate together using Google's global network and control plane. You can configure URL rules to route some URLs to one set of instances and route other URLs to other instances.

Requests are always routed to the instance group that is closest to the user, if that group has enough capacity and is appropriate for the request. If the closest group does not have enough capacity, the request is sent to the closest group that does have capacity.

To set up a load balancer with a Compute Engine backend, your VMs need to be in an instance group. The managed instance group provides VMs running the backend servers of an external Application Load Balancer. For this lab, backends serve their own hostnames.

First, create the load balancer template:

gcloud compute instance-templates create lb-backend-template \
 --region=Region \
 --network=default \
 --subnet=default \
 --tags=allow-health-check \
 --machine-type=e2-medium \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
a2ensite default-ssl
a2enmod ssl
vm_hostname="$(curl -H "Metadata-Flavor:Google" \
 http://169.254.169.254/computeMetadata/v1/instance/name)"
echo "Page served from: $vm_hostname" | \
 tee /var/www/html/index.html
systemctl restart apache2'
Copied!
Managed instance groups (MIGs) let you operate apps on multiple identical VMs. You can make your workloads scalable and highly available by taking advantage of automated MIG services, including: autoscaling, autohealing, regional (multiple zone) deployment, and automatic updating.

Create a managed instance group based on the template:

gcloud compute instance-groups managed create lb-backend-group \
 --template=lb-backend-template --size=2 --zone=Zone
Copied!
Create the fw-allow-health-check firewall rule.

gcloud compute firewall-rules create fw-allow-health-check \
 --network=default \
 --action=allow \
 --direction=ingress \
 --source-ranges=130.211.0.0/22,35.191.0.0/16 \
 --target-tags=allow-health-check \
 --rules=tcp:80
Copied!
Note: The ingress rule allows traffic from the Google Cloud health checking systems (130.211.0.0/22 and 35.191.0.0/16). This lab uses the target tag allow-health-check to identify the VMs
Now that the instances are up and running, set up a global static external IP address that your customers use to reach your load balancer:

gcloud compute addresses create lb-ipv4-1 \
 --ip-version=IPV4 \
 --global
Copied!
Note the IPv4 address that was reserved:

gcloud compute addresses describe lb-ipv4-1 \
 --format="get(address)" \
 --global
Copied!
Create a health check for the load balancer:

gcloud compute health-checks create http http-basic-check \
 --port 80
Copied!
Note: Google Cloud provides health checking mechanisms that determine whether backend instances respond properly to traffic. For more information, please refer to the Creating health checks documentation.
Create a backend service:

gcloud compute backend-services create web-backend-service \
 --protocol=HTTP \
 --port-name=http \
 --health-checks=http-basic-check \
 --global
Copied!
Add your instance group as the backend to the backend service:

gcloud compute backend-services add-backend web-backend-service \
 --instance-group=lb-backend-group \
 --instance-group-zone=Zone \
 --global
Copied!
Create a URL map to route the incoming requests to the default backend service:

gcloud compute url-maps create web-map-http \
 --default-service web-backend-service
Copied!
Note: URL map is a Google Cloud configuration resource used to route requests to backend services or backend buckets. For example, with an external Application Load Balancer, you can use a single URL map to route requests to different destinations based on the rules configured in the URL map:
Requests for https://example.com/video go to one backend service.
Requests for https://example.com/audio go to a different backend service.
Requests for https://example.com/images go to a Cloud Storage backend bucket.
Requests for any other host and path combination go to a default backend service.
Create a target HTTP proxy to route requests to your URL map:

gcloud compute target-http-proxies create http-lb-proxy \
 --url-map web-map-http
Copied!
Create a global forwarding rule to route incoming requests to the proxy:

gcloud compute forwarding-rules create http-content-rule \
 --address=lb-ipv4-1\
 --global \
 --target-http-proxy=http-lb-proxy \
 --ports=80
Copied!
Note: A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud load balancer. Learn more about the general understanding of forwarding rules from the Forwarding rules overview guide.
Click Check my progress to verify that you've created an L7 Application Load Balancer.
Create an Application Load Balancer

Task 6. Test traffic sent to your instances
On the Google Cloud console title bar, type Load balancing in the Search field, then choose Load balancing from the search results.

Click on the load balancer that you just created, web-map-http.

In the Backend section, click on the name of the backend and confirm that the VMs are Healthy. If they are not healthy, wait a few moments and try reloading the page.

When the VMs are healthy, test the load balancer using a web browser, going to http://IP_ADDRESS/, replacing IP_ADDRESS with the load balancer's IP address that you copied previously.

Note: This may take three to five minutes. If you do not connect, wait a minute, and then reload the browser.
Your browser should render a page with content showing the name of the instance that served the page, along with its zone (for example, Page served from: lb-backend-group-xxxx).

Only commands:

gcloud config set compute/region Region
gcloud config set compute/zone Zone

gcloud compute instances create www1 \
 --zone=Zone \
 --tags=network-lb-tag \
 --machine-type=e2-small \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
service apache2 restart
echo "

<h3>Web Server: www1</h3>" | tee /var/www/html/index.html'

gcloud compute instances create www2 \
 --zone=Zone \
 --tags=network-lb-tag \
 --machine-type=e2-small \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
service apache2 restart
echo "

<h3>Web Server: www2</h3>" | tee /var/www/html/index.html'

gcloud compute instances create www3 \
 --zone=Zone \
 --tags=network-lb-tag \
 --machine-type=e2-small \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
service apache2 restart
echo "

<h3>Web Server: www3</h3>" | tee /var/www/html/index.html'

gcloud compute firewall-rules create www-firewall-network-lb \
 --target-tags network-lb-tag --allow tcp:80

gcloud compute instances list

curl http://[IP_ADDRESS]

Configure the load balancing service:

Create a static external IP address for your load balancer:
gcloud compute addresses create network-lb-ip-1 \
 --region Region

Add a legacy HTTP health check resource:
gcloud compute http-health-checks create basic-check

Add a target pool in the same region as your instances. Run the following to create the target pool and use the health check, which is required for the service to function:

gcloud compute target-pools create www-pool \
 --region Region --http-health-check basic-check

Add the instances to the pool:
gcloud compute target-pools add-instances www-pool \
 --instances www1,www2,www3

Add a forwarding rule:
gcloud compute forwarding-rules create www-rule \
 --region Region \
 --ports 80 \
 --address network-lb-ip-1 \
 --target-pool www-pool

Create an Application Load Balancer:

First, create the load balancer template:

gcloud compute instance-templates create lb-backend-template \
 --region=Region \
 --network=default \
 --subnet=default \
 --tags=allow-health-check \
 --machine-type=e2-medium \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata=startup-script='#!/bin/bash
apt-get update
apt-get install apache2 -y
a2ensite default-ssl
a2enmod ssl
vm_hostname="$(curl -H "Metadata-Flavor:Google" \
 http://169.254.169.254/computeMetadata/v1/instance/name)"
echo "Page served from: $vm_hostname" | \
 tee /var/www/html/index.html
systemctl restart apache2'

Create a managed instance group based on the template:

gcloud compute instance-groups managed create lb-backend-group \
 --template=lb-backend-template --size=2 --zone=Zone

Create the fw-allow-health-check firewall rule.

gcloud compute firewall-rules create fw-allow-health-check \
 --network=default \
 --action=allow \
 --direction=ingress \
 --source-ranges=130.211.0.0/22,35.191.0.0/16 \
 --target-tags=allow-health-check \
 --rules=tcp:80

Now that the instances are up and running, set up a global static external IP address that your customers use to reach your load balancer:

gcloud compute addresses create lb-ipv4-1 \
 --ip-version=IPV4 \
 --global

Note the IPv4 address that was reserved:

gcloud compute addresses describe lb-ipv4-1 \
 --format="get(address)" \
 --global

Create a health check for the load balancer:

gcloud compute health-checks create http http-basic-check \
 --port 80

Create a backend service:

gcloud compute backend-services create web-backend-service \
 --protocol=HTTP \
 --port-name=http \
 --health-checks=http-basic-check \
 --global

Add your instance group as the backend to the backend service:

gcloud compute backend-services add-backend web-backend-service \
 --instance-group=lb-backend-group \
 --instance-group-zone=Zone \
 --global

Create a URL map to route the incoming requests to the default backend service:

gcloud compute url-maps create web-map-http \
 --default-service web-backend-service

Create a target HTTP proxy to route requests to your URL map:

gcloud compute target-http-proxies create http-lb-proxy \
 --url-map web-map-http

Create a global forwarding rule to route incoming requests to the proxy:

gcloud compute forwarding-rules create http-content-rule \
 --address=lb-ipv4-1\
 --global \
 --target-http-proxy=http-lb-proxy \
 --ports=80

///////////

Implement Load Balancing on Compute Engine: Challenge Lab

///

Channlenge lab:

Task 1. Create a project jumphost instance
You will use this instance to perform maintenance for the project.

Requirements:

Name the instance nucleus-jumphost-129.
Create the instance in the us-central1-a zone.
Use an e2-micro machine type.
Use the default image type (Debian Linux).

gcloud compute instances create nucleus-jumphost-129 --machine-type e2-micro --zone=us-central1-a --image-family=debian-11

Task 2. Set up an HTTP load balancer
You will serve the site via nginx web servers, but you want to ensure that the environment is fault-tolerant. Create an HTTP load balancer with a managed instance group of 2 nginx web servers. Use the following code to configure the web servers; the team will replace this with their own configuration later.

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF
Copied!
Note: There is a limit to the resources you are allowed to create in your project, so do not create more than 2 instances in your managed instance group. If you do, the lab might end and you might be banned.
You need to:

Create an instance template. Don't use the default machine type. Make sure you specify e2-medium as the machine type and create the Global template.
Create a managed instance group based on the template.
Create a firewall rule named as accept-tcp-rule-757 to allow traffic (80/tcp).
Create a health check.
Create a backend service and add your instance group as the backend to the backend service group with named port (http:80).
Create a URL map, and target the HTTP proxy to route the incoming requests to the default backend service.
Create a target HTTP proxy to route requests to your URL map
Create a forwarding rule.
Note: You may need to wait for 5 to 7 minutes to get the score for this task.

////////
Command line log out put from gcloud clous shell:

Welcome to Cloud Shell! Type "help" to get started.
Your Cloud Platform project in this session is set to qwiklabs-gcp-00-096363b9cdd6.
Use `gcloud config set project [PROJECT_ID]` to change to a different project.
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instances create nucleus-jumphost-129 --machine-type e2-micro --zone=us-central1-a --image-family=debian-11
ERROR: (gcloud.compute.instances.create) Could not fetch resource:

- The resource 'projects/qwiklabs-gcp-00-096363b9cdd6/global/images/family/debian-11' was not found

student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instances create nucleus-jumphost-129 --machine-type e2-micro --zone=us-central1-a --image-family=debian
ERROR: (gcloud.compute.instances.create) Could not fetch resource:

- The resource 'projects/qwiklabs-gcp-00-096363b9cdd6/global/images/family/debian' was not found

student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instances create nucleus-jumphost-129 --machine-type e2-micro --zone=us-central1-a
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/zones/us-central1-a/instances/nucleus-jumphost-129].
NAME: nucleus-jumphost-129
ZONE: us-central1-a
MACHINE_TYPE: e2-micro
PREEMPTIBLE:
INTERNAL_IP: 10.128.0.2
EXTERNAL_IP: 35.222.50.21
STATUS: RUNNING
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-templates create nginx-web-server-template \
 --machine-type=e2-medium \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --network-interface=network-tier=PREMIUM,subnet=default \
 --tags=network-lb-tag \
 --metadata=startup-script='#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html' \
 --global
ERROR: (gcloud.compute.instance-templates.create) unrecognized arguments:
Cloud
Platform

- "\$HOSTNAME"/ /var/www/html/index.nginx-debian.html
  --global (did you mean '--local-ssd'?)
  To search the help text of gcloud commands, run:
  gcloud help -- SEARCH_TERMS
  student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
  student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
  student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-templates create nginx-web-server-template \
   --machine-type=e2-medium \
   --image-family=debian-11 \
   --image-project=debian-cloud \
   --network-interface=network-tier=PREMIUM,subnet=default \
   --tags=network-lb-tag \
   --metadata=startup-script='#! /bin/bash
  apt-get update
  apt-get install -y nginx
  service nginx start
  sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html' \
   --global
  ERROR: (gcloud.compute.instance-templates.create) unrecognized arguments:
  Cloud
  Platform
- "\$HOSTNAME"/ /var/www/html/index.nginx-debian.html
  --global (did you mean '--local-ssd'?)
  To search the help text of gcloud commands, run:
  gcloud help -- SEARCH_TERMS
  student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-templates create nginx-web-server-template \
   --machine-type=e2-medium \
   --image-family=debian-11 \
   --image-project=debian-cloud \
   --network-interface=network-tier=PREMIUM,subnet=default \
   --tags=network-lb-tag \
   --metadata=startup-script='#! /bin/bash
  apt-get update
  apt-get install -y nginx
  service nginx start' \
   --global
  ERROR: (gcloud.compute.instance-templates.create) unrecognized arguments: --global (did you mean '--local-ssd'?)

To search the help text of gcloud commands, run:
gcloud help -- SEARCH_TERMS
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-templates create nginx-web-server-template --machine-type=e2-medium --image-family=debian-11 --image-project=debian-cloud --network-interface=network-tier=PREMIUM,subnet=default --tags=network-lb-tag --metadata=startup-script='#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start'  
Did you mean region [asia-southeast1] for subnetwork: [default] (Y/n)? n

For the following subnetwork:

- [default]
  choose a region:
  [1] africa-south1
  [2] asia-east1
  [3] asia-east2
  [4] asia-northeast1
  [5] asia-northeast2
  [6] asia-northeast3
  [7] asia-south1
  [8] asia-south2
  [9] asia-southeast1
  [10] asia-southeast2
  [11] australia-southeast1
  [12] australia-southeast2
  [13] europe-central2
  [14] europe-north1
  [15] europe-north2
  [16] europe-southwest1
  [17] europe-west1
  [18] europe-west10
  [19] europe-west12
  [20] europe-west2
  [21] europe-west3
  [22] europe-west4
  [23] europe-west6
  [24] europe-west8
  [25] europe-west9
  [26] me-central1
  [27] me-central2
  [28] me-west1
  [29] northamerica-northeast1
  [30] northamerica-northeast2
  [31] northamerica-south1
  [32] southamerica-east1
  [33] southamerica-west1
  [34] us-central1
  [35] us-east1
  [36] us-east4
  [37] us-east5
  [38] us-south1
  [39] us-west1
  [40] us-west2
  [41] us-west3
  [42] us-west4
  Please enter your numeric choice: 34

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/instanceTemplates/nginx-web-server-template].
NAME: nginx-web-server-template
MACHINE_TYPE: e2-medium
PREEMPTIBLE:
CREATION_TIMESTAMP: 2025-04-22T21:46:05.802-07:00
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-groups managed create web-server-group \
 --base-instance-name=nginx-instance \
 --size=2 \
 --template=nginx-web-server-template \
 --zone=us-central1-a

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/zones/us-central1-a/instanceGroupManagers/web-server-group].
NAME: web-server-group
LOCATION: us-central1-a
SCOPE: zone
BASE_INSTANCE_NAME: nginx-instance
SIZE: 0
TARGET_SIZE: 2
INSTANCE_TEMPLATE: nginx-web-server-template
AUTOSCALED: no
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute firewall-rules create accept-tcp-rule-757 \
 --allow tcp:80 \
 --source-ranges
ERROR: (gcloud.compute.firewall-rules.create) argument --source-ranges: expected one argument
Usage: gcloud compute firewall-rules create NAME (--action=ACTION | --allow=PROTOCOL[:PORT[-PORT]],[...]) [optional flags]
optional flags may be --action | --allow | --description |
--destination-ranges | --direction | --disabled |
--enable-logging | --help | --logging-metadata |
--network | --priority | --rules | --source-ranges |
--source-service-accounts | --source-tags |
--target-service-accounts | --target-tags

For detailed information on this command and its flags, run:
gcloud compute firewall-rules create --help
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute firewall-rules create accept-tcp-rule-757 \
 --network=default \
 --action=allow \
 --direction=ingress \
 --source-ranges=130.211.0.0/22,35.191.0.0/16 \
 --rules=tcp:80
Creating firewall...working..Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/firewalls/accept-tcp-rule-757].  
Creating firewall...done.  
NAME: accept-tcp-rule-757
NETWORK: default
DIRECTION: INGRESS
PRIORITY: 1000
ALLOW: tcp:80
DENY:
DISABLED: False
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute health-checks create http nginx-health-check \
 --port=80 \
 --request-path=/ \
 --check-interval=10s \
 --timeout=5s \
 --unhealthy-threshold=2 \
 --healthy-threshold=2
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/healthChecks/nginx-health-check].
NAME: nginx-health-check
PROTOCOL: HTTP
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute backend-services create web-backend-service \
 --protocol=HTTP \
 --port-name=http \
 --health-checks=nginx-health-check \
 --global

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/backendServices/web-backend-service].
NAME: web-backend-service
BACKENDS:
PROTOCOL: HTTP
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute url-maps create web-server-url-map \
 --default-service=web-backend-service
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/urlMaps/web-server-url-map].
NAME: web-server-url-map
DEFAULT_SERVICE: backendServices/web-backend-service
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute target-http-proxies create web-server-http-proxy \
 --url-map=web-server-url-map
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/targetHttpProxies/web-server-http-proxy].
NAME: web-server-http-proxy
URL_MAP: web-server-url-map
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute addresses create web-server-ip \
 --global
gcloud compute forwarding-rules create web-server-forwarding-rule \
 --global \
 --target-http-proxy=web-server-http-proxy \
 --ports=80 \
 --address=web-server-ip \
 --ip-protocol=TCP
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/addresses/web-server-ip].

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/forwardingRules/web-server-forwarding-rule].
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
-bash: syntax error near unexpected token `qwiklabs-gcp-00-096363b9cdd6'
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-groups managed create nginx-mig \
 --base-instance-name=nginx-instance \
 --size=2 \
 --template=nginx-web-server-template \
 --zone=us-central1-a
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/zones/us-central1-a/instanceGroupManagers/nginx-mig].
NAME: nginx-mig
LOCATION: us-central1-a
SCOPE: zone
BASE_INSTANCE_NAME: nginx-instance
SIZE: 0
TARGET_SIZE: 2
INSTANCE_TEMPLATE: nginx-web-server-template
AUTOSCALED: no
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ ls
README-cloudshell.txt
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ ls
README-cloudshell.txt startup.sh
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-templates create nginx-web-server-template \
 --machine-type=e2-medium \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata-from-file=startup-script=startup.sh \
 --tags=allow-http
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/instanceTemplates/nginx-web-server-template].
NAME: nginx-web-server-template
MACHINE_TYPE: e2-medium
PREEMPTIBLE:
CREATION_TIMESTAMP: 2025-04-22T22:17:48.070-07:00
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-groups managed create nginx-mig \
 --base-instance-name=nginx \
 --size=2 \
 --template=nginx-template \
 --zone=us-central1-a
ERROR: (gcloud.compute.instance-groups.managed.create) Could not fetch resource:

- Invalid value for field 'resource.instanceTemplate': 'https://compute.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/instanceTemplates/nginx-template'. https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/instanceTemplates/nginx-template does not exist.

student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
gcloud compute instance-groups managed create nginx-mig \
 --base-instance-name=nginx \
 --size=2 \
 --template=nginx-web-server-template \
 --zone=us-central1-a
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/zones/us-central1-a/instanceGroupManagers/nginx-mig].
NAME: nginx-mig
LOCATION: us-central1-a
SCOPE: zone
BASE_INSTANCE_NAME: nginx
SIZE: 0
TARGET_SIZE: 2
INSTANCE_TEMPLATE: nginx-web-server-template
AUTOSCALED: no
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute firewall-rules create allow-http \
 --network=default \
 --allow=tcp:80 \
 --target-tags=allow-http
Creating firewall...working.  
Creating firewall...working..Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/firewalls/allow-http].  
Creating firewall...done.  
NAME: allow-http
NETWORK: default
DIRECTION: INGRESS
PRIORITY: 1000
ALLOW: tcp:80
DENY:
DISABLED: False
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute health-checks create http http-health-check \
 --port 80
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/healthChecks/http-health-check].
NAME: http-health-check
PROTOCOL: HTTP
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute backend-services create nginx-backend \
 gcloud compute backend-services create nginx-backend \
 --protocol=HTTP \
 --port-name=http \
 --health-checks=http-health-check \
 --global

gcloud compute backend-services add-backend nginx-backend \
 --instance-group=nginx-mig \
 --instance-group-zone=us-central1-a \
 --global

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/backendServices/nginx-backend].
NAME: nginx-backend
BACKENDS:
PROTOCOL: HTTP
Updated [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/backendServices/nginx-backend].
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute firewall-rules create accept-tcp-rule-757 \
 --network=default \
 --allow=tcp:80 \
 --target-tags=accept-tcp-rule-757
Creating firewall...failed.  
ERROR: (gcloud.compute.firewall-rules.create) Could not fetch resource:

- The resource 'projects/qwiklabs-gcp-00-096363b9cdd6/global/firewalls/accept-tcp-rule-757' already exists

student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute url-maps create nginx-url-map \
 --default-service=nginx-backend

gcloud compute target-http-proxies create nginx-http-proxy \
 --url-map=nginx-url-map
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/urlMaps/nginx-url-map].
NAME: nginx-url-map
DEFAULT_SERVICE: backendServices/nginx-backend
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/targetHttpProxies/nginx-http-proxy].
NAME: nginx-http-proxy
URL_MAP: nginx-url-map
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute addresses create nginx-lb-ip \
 --ip-version=IPV4 \
 --global

gcloud compute addresses describe nginx-lb-ip \
 --global \
 --format="get(address)"
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/addresses/nginx-lb-ip].
34.110.229.121
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute forwarding-rules create nginx-http-forwarding-rule \
 --address=nginx-lb-ip \
 --global \
 --target-http-proxy=nginx-http-proxy \
 --ports=80

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/global/forwardingRules/nginx-http-forwarding-rule].
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute addresses describe nginx-lb-ip \
 --global \
 --format="get(address)"
34.110.229.121
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$ gcloud compute instance-groups managed set-named-ports nginx-mig \
 --named-ports http:80 \
 --zone=us-central1-a
Updated [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-096363b9cdd6/zones/us-central1-a/instanceGroups/nginx-mig].
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$
student_01_20c63836fe05@cloudshell:~ (qwiklabs-gcp-00-096363b9cdd6)$

///////////////////

Step 1: Create the Startup Script
In your Cloud Shell or terminal:

bash
Copy
Edit
cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

Step 2: Create Instance Template Using the Script

gcloud compute instance-templates create nginx-template \
 --machine-type=e2-medium \
 --image-family=debian-11 \
 --image-project=debian-cloud \
 --metadata-from-file=startup-script=startup.sh \
 --tags=allow-http

Step 3: Create a Managed Instance Group with 2 Instances

gcloud compute instance-groups managed create nginx-mig \
 --base-instance-name=nginx \
 --size=2 \
 --template=nginx-template \
 --zone=us-central1-a

Step 4: Create a Firewall Rule to Allow HTTP Traffic

gcloud compute firewall-rules create allow-http \
 --network=default \
 --allow=tcp:80 \
 --target-tags=allow-http

Step 5: Create a Health Check

gcloud compute health-checks create http http-health-check \
 --port 80

Step 6: Create Backend Service and Add MIG

gcloud compute backend-services create nginx-backend \
 --protocol=HTTP \
 --port-name=http \
 --health-checks=http-health-check \
 --global

gcloud compute backend-services add-backend nginx-backend \
 --instance-group=nginx-mig \
 --instance-group-zone=us-central1-a \
 --global

gcloud compute firewall-rules create accept-tcp-rule-757 \
 --network=default \
 --allow=tcp:80 \
 --target-tags=accept-tcp-rule-757

gcloud compute url-maps create nginx-url-map \
 --default-service=nginx-backend

gcloud compute target-http-proxies create nginx-http-proxy \
 --url-map=nginx-url-map

gcloud compute addresses create nginx-lb-ip \
 --ip-version=IPV4 \
 --global

gcloud compute addresses describe nginx-lb-ip \
 --global \
 --format="get(address)"

gcloud compute forwarding-rules create nginx-http-forwarding-rule \
 --address=nginx-lb-ip \
 --global \
 --target-http-proxy=nginx-http-proxy \
 --ports=80

gcloud compute addresses describe nginx-lb-ip \
 --global \
 --format="get(address)"

34.110.229.121

gcloud compute instance-groups managed set-named-ports nginx-mig \
 --named-ports http:80 \
 --zone=us-central1-a
