Overview
Google Cloud Virtual Private Cloud (VPC) Network Peering allows private connectivity across two VPC networks regardless of whether or not they belong to the same project or the same organization.

VPC Network Peering allows you to build SaaS (Software-as-a-Service) ecosystems in Google Cloud, making services available privately across different VPC networks within and across organizations, allowing workloads to communicate in private space.

VPC Network Peering is useful for:

Organizations with several network administrative domains.
Organizations that want to peer with other organizations.
If you have multiple network administrative domains within your organization, VPC Network Peering allows you to make services available across VPC networks in private space. If you offer services to other organizations, VPC Network Peering allows you to make those services available in private space to those organizations.

The ability to offer services across organizations is useful if you want to offer services to other enterprises, and it is useful within your own enterprise if you have several distinct organization nodes due to your own structure or as a result of mergers or acquisitions.

VPC Network Peering gives you several advantages over using external IP addresses or VPNs to connect networks, including:

Network Latency: Private networking offers lower latency than public IP networking.
Network Security: Service owners do not need to have their services exposed to the public Internet and deal with its associated risks.
Network Cost: Networks that are peered can use internal IPs to communicate and save Google Cloud egress bandwidth costs. Regular network pricing still applies to all traffic.
What you'll do
Create a custom network in two projects
Set up a VPC network peering session
Setup and requirements
Before you click the Start Lab button
Read these instructions. Labs are timed and you cannot pause them. The timer, which starts when you click Start Lab, shows how long Google Cloud resources are made available to you.

(Optional) You can list the active account name with this command:
gcloud auth list

ACTIVE: \*
ACCOUNT: student-02-c75b8e7cb71f@qwiklabs.net

$ gcloud config set account `ACCOUNT`
(Optional) You can list the project ID with this command:
gcloud config list project

[core]
project = qwiklabs-gcp-03-577f69307a56
Note: For full documentation of gcloud, in Google Cloud, refer to the gcloud CLI overview guide.

Task 1. Create a custom network in both projects
Within the same organization node, a network could be hosting services that need to be accessible from other VPC networks in the same or different projects.

Alternatively, one organization may want to access services a third-party service is offering.

Project names are unique across all of Google Cloud, so you do not need to specify the organization when setting up peering. Google Cloud knows the organization based on the project name.

In this lab, you have been provisioned 2 projects, the first project is project-A and second is project-B.

In each project, start a new Cloud Shell by click + icon.

In the Cloud Shell for project-A, set the project ID for the project-A:

gcloud config set project qwiklabs-gcp-03-577f69307a56
Copied!
In the Cloud Shell for project-B, set the project ID for the project-B:
gcloud config set project qwiklabs-gcp-00-60c9b3d6166a
Copied!
project-A:
Go back to first Cloud Shell and run the following to create a custom network:
gcloud compute networks create network-a --subnet-mode custom
Copied!
Create a subnet within this VPC and specify a region and IP range by running:
gcloud compute networks subnets create network-a-subnet --network network-a \
 --range 10.0.0.0/16 --region us-east1
Copied!
Create a VM instance:
gcloud compute instances create vm-a --zone us-east1-c --network network-a --subnet network-a-subnet --machine-type e2-small
Copied!
Run the following to enable SSH and icmp, because you'll need a secure shell to communicate with VMs during connectivity testing:
gcloud compute firewall-rules create network-a-fw --network network-a --allow tcp:22,icmp
Copied!
Next you set up Project-B in the same way.

Click Check my progress to verify the objective.
Create a custom network in project-A

project-B:
Switch to the second Cloud Shell and create a custom network:
gcloud compute networks create network-b --subnet-mode custom
Copied!
Create a subnet within this VPC and specify a region and IP range by running:
gcloud compute networks subnets create network-b-subnet --network network-b \
 --range 10.8.0.0/16 --region us-east4
Copied!
Create a VM instance:
gcloud compute instances create vm-b --zone us-east4-b --network network-b --subnet network-b-subnet --machine-type e2-small
Copied!
Run the following to enable SSH and icmp, because you'll need a secure shell to communicate with VMs during connectivity testing:
gcloud compute firewall-rules create network-b-fw --network network-b --allow tcp:22,icmp
Copied!
Click Check my progress to verify the objective.
Create a custom network in project-B

Task 2. Set up a VPC network peering session
Consider an organization which needs VPC Network Peering to be established between network-A in project-A, and network-B in project-B. In order for VPC Network Peering to be established successfully, administrators of network-A and network-B must separately configure the peering association.

Peer network-A with network-B:
Peer-AB network diagram

Select the correct project in the console before you apply the setting by clicking the down arrow next to the Project ID at the top of the screen, then select which project ID you need.

Select project dialog box

project-A

Go to the VPC Network Peering in the Cloud Console by navigating to the Networking section and clicking VPC Network > VPC network peering in the left menu. Once you're there:

Click Create connection.
Click Continue.
Type "peer-ab" as the Name for this side of the connection.
Under Your VPC network, select the network you want to peer (network-a).
Set the Peered VPC network radio buttons to In another project.
Paste in the Project ID of the second project.
qwiklabs-gcp-00-60c9b3d6166a
Copied!
Type in the VPC network name of the other network (network-b).
Click Create.
At this point, the peering state remains INACTIVE because there is no matching configuration in network-b in project-B. You should see the Status message, Waiting for peer network to connect.

Click Check my progress to verify the objective.
Peer network-a with network-b

Peer network-b with network-a
Peer-BA network diagram

Note: Switch to the second project in the console.

project-B

Click Create connection.
Click Continue.
Type "peer-ba" as the Name for this side of the connection.
Under Your VPC network, select the network you want to peer (network-b).
Set the Peering VPC network radio buttons to In another project, unless you wish to peer within the same project.
Specify the Project ID of the first project.
qwiklabs-gcp-03-577f69307a56
Copied!
Specify VPC network name of the other network (network-a).
Click Create.
In the VPC network peering, you should now see peer-ba listed in the property list.

VPC Network Peering becomes ACTIVE and routes are exchanged As soon as the peering moves to an ACTIVE state, traffic flows are set up:

Between VM instances in the peered networks: Full mesh connectivity.
From VM instances in one network to Internal Load Balancing endpoints in the peered network.
Active Peer-AB and Peer-BA network diagram

The routes to peered network CIDR prefixes are now visible across the VPC network peers. These routes are implicit routes generated for active peerings. They don't have corresponding route resources. The following command lists routes for all VPC networks for project-A.

gcloud compute routes list --project qwiklabs-gcp-03-577f69307a56
Copied!
Example output:

NAME NETWORK DEST_RANGE NEXT_HOP PRIORITY
default-route-2a865a00fa31d5df network-a 0.0.0.0/0 default-internet-gateway 1000
default-route-8af4732e693eae27 network-a 10.0.0.0/16 1000
peering-route-4732ee69e3ecab41 network-a 10.8.0.0/16 peer-ab 1000
Click Check my progress to verify the objective.
Peer network-b with network-a

Task 3. Test connectivity
In this task, you perform a connectivity test.

project-A
Navigate to VM instances console by clicking Navigation Menu > Compute Engine > VM instances.

Copy the INTERNAL_IP for vm-a.

project-B
Click Navigation Menu > Compute Engine > VM instances.
SSH into vm-b instance.

In the SSH shell of vm-b, run the following command replacing <INTERNAL_IP_OF_VM_A> with the vm-a instance INTERNAL_IP:
ping -c 5 <INTERNAL_IP_OF_VM_A>
Copied!
Example output:

PING 10.8.0.2 (10.8.0.2) 56(84) bytes of data.
64 bytes from 10.8.0.2: icmp_seq=1 ttl=64 time=1.07 ms
64 bytes from 10.8.0.2: icmp_seq=2 ttl=64 time=0.364 ms
64 bytes from 10.8.0.2: icmp_seq=3 ttl=64 time=0.205 ms
64 bytes from 10.8.0.2: icmp_seq=4 ttl=64 time=0.216 ms
64 bytes from 10.8.0.2: icmp_seq=5 ttl=64 time=0.164 ms

--- 10.8.0.2 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4065ms
rtt min/avg/max/mdev = 0.164/0.404/1.072/0.340 ms

Congratulations!
////////

Console output:

student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-00-60c9b3d6166a)$ gcloud config set project qwiklabs-gcp-03-577f69307a56
Updated property [core/project].
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud config list project
[core]
project = qwiklabs-gcp-03-577f69307a56

Your active configuration is: [cloudshell-32459]

student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute networks create network-a --subnet-mode custom
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/global/networks/network-a].
NAME: network-a
SUBNET_MODE: CUSTOM
BGP_ROUTING_MODE: REGIONAL
IPV4_RANGE:
GATEWAY_IPV4:
INTERNAL_IPV6_RANGE:

Instances on this network will not be reachable until firewall rules
are created. As an example, you can allow all internal traffic between
instances as well as SSH, RDP, and ICMP by running:

$ gcloud compute firewall-rules create <FIREWALL_NAME> --network network-a --allow tcp,udp,icmp --source-ranges <IP_RANGE>
$ gcloud compute firewall-rules create <FIREWALL_NAME> --network network-a --allow tcp:22,tcp:3389,icmp

student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute networks subnets create network-a-subnet --network network-a \
 --range 10.0.0.0/16 --region us-east1

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/regions/us-east1/subnetworks/network-a-subnet].
NAME: network-a-subnet
REGION: us-east1
NETWORK: network-a
RANGE: 10.0.0.0/16
STACK_TYPE: IPV4_ONLY
IPV6_ACCESS_TYPE:
INTERNAL_IPV6_PREFIX:
EXTERNAL_IPV6_PREFIX:
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute instances create vm-a --zone us-east1-c --network network-a --subnet network-a-subnet --machine-type e2-small
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/zones/us-east1-c/instances/vm-a].
NAME: vm-a
ZONE: us-east1-c
MACHINE_TYPE: e2-small
PREEMPTIBLE:
INTERNAL_IP: 10.0.0.2
EXTERNAL_IP: 104.196.53.219
STATUS: RUNNING
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute firewall-rules create network-a-fw --network network-a --allow tcp:22,icmp
Creating firewall...working..Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/global/firewalls/network-a-fw].  
Creating firewall...done.  
NAME: network-a-fw
NETWORK: network-a
DIRECTION: INGRESS
PRIORITY: 1000
ALLOW: tcp:22,icmp
DENY:
DISABLED: False
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$

For network b
.......

student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-00-60c9b3d6166a)$ gcloud config set project qwiklabs-gcp-03-577f69307a56
Updated property [core/project].
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud config list project
[core]
project = qwiklabs-gcp-03-577f69307a56

Your active configuration is: [cloudshell-32459]

student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ 
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ 
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute networks create network-a --subnet-mode custom
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/global/networks/network-a].
NAME: network-a
SUBNET_MODE: CUSTOM
BGP_ROUTING_MODE: REGIONAL
IPV4_RANGE: 
GATEWAY_IPV4: 
INTERNAL_IPV6_RANGE: 

Instances on this network will not be reachable until firewall rules
are created. As an example, you can allow all internal traffic between
instances as well as SSH, RDP, and ICMP by running:

$ gcloud compute firewall-rules create <FIREWALL_NAME> --network network-a --allow tcp,udp,icmp --source-ranges <IP_RANGE>
$ gcloud compute firewall-rules create <FIREWALL_NAME> --network network-a --allow tcp:22,tcp:3389,icmp

student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ 
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute networks subnets create network-a-subnet --network network-a \
    --range 10.0.0.0/16 --region us-east1

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/regions/us-east1/subnetworks/network-a-subnet].
NAME: network-a-subnet
REGION: us-east1
NETWORK: network-a
RANGE: 10.0.0.0/16
STACK_TYPE: IPV4_ONLY
IPV6_ACCESS_TYPE: 
INTERNAL_IPV6_PREFIX: 
EXTERNAL_IPV6_PREFIX: 
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ 
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute instances create vm-a --zone us-east1-c --network network-a --subnet network-a-subnet --machine-type e2-small
Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/zones/us-east1-c/instances/vm-a].
NAME: vm-a
ZONE: us-east1-c
MACHINE_TYPE: e2-small
PREEMPTIBLE: 
INTERNAL_IP: 10.0.0.2
EXTERNAL_IP: 104.196.53.219
STATUS: RUNNING
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ gcloud compute firewall-rules create network-a-fw --network network-a --allow tcp:22,icmp
Creating firewall...working..Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-03-577f69307a56/global/firewalls/network-a-fw].                                 
Creating firewall...done.                                                                                                                                                         
NAME: network-a-fw
NETWORK: network-a
DIRECTION: INGRESS
PRIORITY: 1000
ALLOW: tcp:22,icmp
DENY: 
DISABLED: False
student_02_c75b8e7cb71f@cloudshell:~ (qwiklabs-gcp-03-577f69307a56)$ 


