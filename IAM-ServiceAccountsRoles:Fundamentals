Service Accounts and Roles: Fundamentals:

Overview
Service accounts are a special type of Google account that grant permissions to virtual machines instead of end users. Service accounts are primarily used to ensure safe, managed connections to APIs and Google Cloud services. Granting access to trusted connections and rejecting malicious ones is a must-have security feature for any Google Cloud project. In this lab, you get hands-on practice with the ins and outs of service accounts.

What are service accounts?
A service account is a special Google account that belongs to your application or a virtual machine (VM) instead of an individual end user. Your application uses the service account to call the Google API of a service, so that the users aren't directly involved.

For example, a Compute Engine VM may run as a service account, and that account can be given permissions to access the resources it needs. This way the service account is the identity of the service, and the service account's permissions control which resources the service can access.

A service account is identified by its email address, which is unique to the account.

Types of service accounts
User-managed service accounts
When you create a new Cloud project using Google Cloud console and if Compute Engine API is enabled for your project, a Compute Engine Service account is created for you by default. It is identifiable using the email:

PROJECT_NUMBER-compute@developer.gserviceaccount.com
If your project contains an App Engine application, the default App Engine service account is created in your project by default. It is identifiable using the email:

PROJECT_ID@appspot.gserviceaccount.com
Google-managed service accounts
In addition to the user-managed service accounts, you might see some additional service accounts in your project’s IAM policy or in the console. These service accounts are created and owned by Google. These accounts represent different Google services and each account is automatically granted IAM roles to access your Google Cloud project.

Google APIs service account
An example of a Google-managed service account is a Google API service account identifiable using the email:

PROJECT_NUMBER@cloudservices.gserviceaccount.com
This service account is designed specifically to run internal Google processes on your behalf and is not listed in the Service Accounts section of the console. By default, the account is automatically granted the project editor role on the project and is listed in the IAM section of the console. This service account is deleted only when the project is deleted.

Note: Google services rely on the account having access to your project, so you should not remove or change the service account’s role on your project.

Types of roles
There are three types of roles in Cloud IAM:

Primitive roles, which include the Owner, Editor, and Viewer roles that existed prior to the introduction of Cloud IAM.
Predefined roles, which provide granular access for a specific service and are managed by Google Cloud.
Custom roles, which provide granular access according to a user-specified list of permissions.

Task 1. Create and manage service accounts

When you create a new Cloud project, Google Cloud automatically creates one Compute Engine service account and one App Engine service account under that project. You can create up to 98 additional service accounts to your project to control access to your resources.

Creating a service account
Creating a service account is similar to adding a member to your project, but the service account belongs to your applications rather than an individual end user.

To create a service account, run the following command in Cloud Shell:
gcloud iam service-accounts create my-sa-123 --display-name "my service account"
Copied!
The output of this command is the service account, which looks similar to the following:

Created service account [my-sa-123]

student_02_af912b43c8e0@cloudshell:~ (qwiklabs-gcp-01-36e2d434242e)$ gcloud iam service-accounts create my-sa-123 --display-name "my service account"
Created service account [my-sa-123].
student_02_af912b43c8e0@cloudshell:~ (qwiklabs-gcp-01-36e2d434242e)$

## Now Granting roles to service accounts:

student_02_af912b43c8e0@cloudshell:~ (qwiklabs-gcp-01-36e2d434242e)$ gcloud projects add-iam-policy-binding $DEVSHELL_PROJECT_ID \
    --member serviceAccount:my-sa-123@$DEVSHELL_PROJECT_ID.iam.gserviceaccount.com --role roles/editor
Updated IAM policy for project [qwiklabs-gcp-01-36e2d434242e].
bindings:

- members:
  - serviceAccount:qwiklabs-gcp-01-36e2d434242e@qwiklabs-gcp-01-36e2d434242e.iam.gserviceaccount.com
    role: roles/bigquery.admin
- members:
  - serviceAccount:1079701793915@cloudbuild.gserviceaccount.com
    role: roles/cloudbuild.builds.builder
- members:
  - serviceAccount:service-1079701793915@gcp-sa-cloudbuild.iam.gserviceaccount.com
    role: roles/cloudbuild.serviceAgent
- members:
  - serviceAccount:service-1079701793915@compute-system.iam.gserviceaccount.com
    role: roles/compute.serviceAgent
- members:
  - serviceAccount:service-1079701793915@container-engine-robot.iam.gserviceaccount.com
    role: roles/container.serviceAgent
- members:
  - serviceAccount:1079701793915-compute@developer.gserviceaccount.com
  - serviceAccount:1079701793915@cloudservices.gserviceaccount.com
  - serviceAccount:my-sa-123@qwiklabs-gcp-01-36e2d434242e.iam.gserviceaccount.com
  - user:student-02-af912b43c8e0@qwiklabs.net
    role: roles/editor
- members:
  - serviceAccount:admiral@qwiklabs-services-prod.iam.gserviceaccount.com
  - serviceAccount:qwiklabs-gcp-01-36e2d434242e@qwiklabs-gcp-01-36e2d434242e.iam.gserviceaccount.com
  - user:student-02-af912b43c8e0@qwiklabs.net
    role: roles/owner
- members:
  - serviceAccount:qwiklabs-gcp-01-36e2d434242e@qwiklabs-gcp-01-36e2d434242e.iam.gserviceaccount.com
    role: roles/storage.admin
- members:
  - user:student-02-af912b43c8e0@qwiklabs.net
    role: roles/viewer
    etag: BwY0M4HY3cw=
    version: 1
    student_02_af912b43c8e0@cloudshell:~ (qwiklabs-gcp-01-36e2d434242e)$

Task 2. Use the client libraries to access BigQuery using a service account

Here, you query the BigQuery public datasets from an instance with the help of a service account that has the necessary roles.

Create a service account
First create a new service account from the console.

Go to Navigation menu > IAM & Admin, select Service accounts and click on + Create Service Account.

Fill necessary details with:

Service account name: bigquery-qwiklab
Now click Create and Continue and then add the following roles:

Bigquery > BigQuery Data Viewer

BigQuery > BigQuery User

Create a VM instance
In the console, go to Compute Engine > VM Instances, and click Create Instance.

In the Machine configuration:

Set the following values:

Configuration Value
Name bigquery-instance
Region us-west1
Zone us-west1-a
Series E2
Machine Type e2-medium
Click OS and storage.

Click Change to begin configuring your boot disk:

Boot Disk: Debian GNU/Linux 11 (bullseye) x86/64
Click Select.

Click Security.

Set the following values:

Configuration Value
Service account bigquery-qwiklab
Access scopes Set access for each API
BigQuery Enabled
Note: If the bigquery-qwiklab service account doesn't appear in the drop-down list, try typing the name into the "Filter" section.
Click Create.

Put the example code on a Compute Engine instance
In the console, go to Compute Engine > VM Instances.
SSH into bigquery-instance by clicking on the SSH button.
Note: While connecting to SSH, you can click on Connect without Identity-Aware Proxy.
In the SSH window, install the necessary dependencies by running the following commands:

sudo apt-get update
Copied!
sudo apt-get install -y git python3-pip
Copied!
pip3 install --upgrade pip
Copied!
pip3 install google-cloud-bigquery
Copied!
pip3 install pyarrow
Copied!
pip3 install pandas
Copied!
pip3 install db-dtypes
Copied!
Now create the example Python file:

echo "
from google.auth import compute_engine
from google.cloud import bigquery

credentials = compute_engine.Credentials(
service_account_email='YOUR_SERVICE_ACCOUNT')

query = '''
SELECT
year,
COUNT(1) as num_babies
FROM
publicdata.samples.natality
WHERE
year > 2000
GROUP BY
year
'''

client = bigquery.Client(
project='qwiklabs-gcp-01-36e2d434242e',
credentials=credentials)
print(client.query(query).to_dataframe())
" > query.py
Copied!
Add the Project ID to query.py with:

sed -i -e "s/qwiklabs-gcp-01-36e2d434242e/$(gcloud config get-value project)/g" query.py
Copied!
Run the following to make sure that the sed command has successfully changed the Project ID in the file:

cat query.py
Copied!
Example output (yours may differ):

from google.auth import compute_engine
from google.cloud import bigquery

credentials = compute_engine.Credentials(
service_account_email='YOUR_SERVICE_ACCOUNT')

query = '''
SELECT
year,
COUNT(1) as num_babies
FROM
publicdata.samples.natality
WHERE
year > 2000
GROUP BY
year
'''

client = bigquery.Client(
project=qwiklabs-gcp-01-36e2d434242e,
credentials=credentials)
print(client.query(query).to_dataframe())
Add the service account email to query.py with:

sed -i -e "s/YOUR_SERVICE_ACCOUNT/bigquery-qwiklab@$(gcloud config get-value project).iam.gserviceaccount.com/g" query.py
Copied!
Run the following to make sure that the sed command has successfully changed the service account email in the file:

cat query.py
Copied!
Example output (yours may differ):

from google.auth import compute_engine
from google.cloud import bigquery
credentials = compute_engine.Credentials(
service_account_email='bigquery-qwiklab@qwiklabs-gcp-01-36e2d434242e.iam.gserviceaccount.com')

query = '''
SELECT
year,
COUNT(1) as num_babies
FROM
publicdata.samples.natality
WHERE
year > 2000
GROUP BY
year
'''

client = bigquery.Client(
project=qwiklabs-gcp-01-36e2d434242e,
credentials=credentials)
print(client.query(query).to_dataframe())
The application now uses the permissions that are associated with this service account. Run the query with the following Python command:

python3 query.py
Copied!
The query should return the following output (your numbers may vary):

Row year num_babies
0 2008 4255156
1 2006 4273225
2 2003 4096092
3 2004 4118907
4 2002 4027376
5 2005 4145619
6 2001 4031531
7 2007 4324008
Note: Your row values might not map to the years in the above output. However, make sure that the babies per year are the same.
Awesome work! You made a request to a BigQuery public dataset with a bigquery-qwiklab service account.

........

## output from vm ssh console output:

student-02-af912b43c8e0@bigquery-instance:~$ sudo apt-get update
Hit:1 https://packages.cloud.google.com/apt google-compute-engine-bullseye-stable InRelease
Hit:2 https://deb.debian.org/debian bullseye InRelease
Hit:3 https://deb.debian.org/debian-security bullseye-security InRelease
Hit:4 https://deb.debian.org/debian bullseye-updates InRelease
Hit:5 https://deb.debian.org/debian bullseye-backports InRelease
Hit:6 https://packages.cloud.google.com/apt cloud-sdk-bullseye InRelease
Hit:7 https://packages.cloud.google.com/apt google-cloud-ops-agent-bullseye-2 InRelease
Reading package lists... Done
student-02-af912b43c8e0@bigquery-instance:~$ sudo apt-get install -y git python3-pip
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
Unpacking libpython3-dev:amd64 (3.9.2-3) ...
Selecting previously unselected package manpages-dev.
Preparing to unpack .../75-manpages-dev_5.10-1_all.deb ...
Unpacking manpages-dev (5.10-1) ...
Selecting previously unselected package python-pip-whl.
Preparing to unpack .../76-python-pip-whl_20.3.4-4+deb11u1_all.deb ...
Unpacking python-pip-whl (20.3.4-4+deb11u1) ...
Selecting previously unselected package zlib1g-dev:amd64.
Preparing to unpack .../77-zlib1g-dev_1%3a1.2.11.dfsg-2+deb11u2_amd64.deb ...
Unpacking zlib1g-dev:amd64 (1:1.2.11.dfsg-2+deb11u2) ...
Selecting previously unselected package python3.9-dev.
Preparing to unpack .../78-python3.9-dev_3.9.2-1+deb11u3_amd64.deb ...
Unpacking python3.9-dev (3.9.2-1+deb11u3) ...
student-02-af912b43c8e0@bigquery-instance:~$
student-02-af912b43c8e0@bigquery-instance:~$ echo "

> from google.auth import compute_engine
> from google.cloud import bigquery
>
> credentials = compute_engine.Credentials(
> service_account_email='YOUR_SERVICE_ACCOUNT')
>
> query = '''
> SELECT
> year,
> COUNT(1) as num_babies
> FROM
> publicdata.samples.natality
> WHERE
> year > 2000
> GROUP BY
> year
> '''
>
> client = bigquery.Client(
> project='qwiklabs-gcp-01-36e2d434242e',
> credentials=credentials)
> print(client.query(query).to_dataframe())
> " > query.py
> student-02-af912b43c8e0@bigquery-instance:~$
> student-02-af912b43c8e0@bigquery-instance:~$
> student-02-af912b43c8e0@bigquery-instance:~$ vim query.py
> student-02-af912b43c8e0@bigquery-instance:~$
> student-02-af912b43c8e0@bigquery-instance:~$ sed -i -e "s/qwiklabs-gcp-01-36e2d434242e/$(gcloud config get-value project)/g" query.py
student-02-af912b43c8e0@bigquery-instance:~$
> student-02-af912b43c8e0@bigquery-instance:~$ cat query.py

from google.auth import compute_engine
from google.cloud import bigquery

credentials = compute_engine.Credentials(
service_account_email='YOUR_SERVICE_ACCOUNT')

query = '''
SELECT
year,
COUNT(1) as num_babies
FROM
publicdata.samples.natality
WHERE
year > 2000
GROUP BY
year
'''

client = bigquery.Client(
project='qwiklabs-gcp-01-36e2d434242e',
credentials=credentials)
print(client.query(query).to_dataframe())

student-02-af912b43c8e0@bigquery-instance:~$
student-02-af912b43c8e0@bigquery-instance:~$ sed -i -e "s/YOUR_SERVICE_ACCOUNT/bigquery-qwiklab@$(gcloud config 
get-value project).iam.gserviceaccount.com/g" query.py
student-02-af912b43c8e0@bigquery-instance:~$
student-02-af912b43c8e0@bigquery-instance:~$ cat query.py

from google.auth import compute_engine
from google.cloud import bigquery

credentials = compute_engine.Credentials(
service_account_email='bigquery-qwiklab@qwiklabs-gcp-01-36e2d434242e.iam.gserviceaccount.com')

query = '''
SELECT
year,
COUNT(1) as num_babies
FROM
publicdata.samples.natality
WHERE
year > 2000
GROUP BY
year
'''

client = bigquery.Client(
project='qwiklabs-gcp-01-36e2d434242e',
credentials=credentials)
print(client.query(query).to_dataframe())

student-02-af912b43c8e0@bigquery-instance:~$
student-02-af912b43c8e0@bigquery-instance:~$
student-02-af912b43c8e0@bigquery-instance:~$ python3 query.py
/home/student-02-af912b43c8e0/.local/lib/python3.9/site-packages/google/cloud/bigquery/table.py:1933: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.
warnings.warn(
year num_babies
0 2005 4145619
1 2003 4096092
2 2008 4255156
3 2001 4031531
4 2006 4273225
5 2004 4118907
6 2002 4027376
7 2007 4324008
student-02-af912b43c8e0@bigquery-instance:~$

