Overview
In this lab, you learn how to use some advanced features of Google Cloud Security and Privacy APIs, including:

Setting up a secure Cloud Storage bucket
Managing keys and encrypted data using Key Management Service
Viewing Cloud Storage audit logs
You use abridged data from the Enron Corpus, encrypt it, and load it into Cloud Storage.

What you'll learn
How to encrypt data and manage encryption keys using Cloud Key Management Service (KMS).

Task 1. Create a Cloud Storage bucket
In order to store the data for this lab you need to create your own Cloud Storage bucket.

Pick a name for your Cloud Storage bucket, such as qwiklabs-gcp-02-1f29d532a3fb-enron_corpus. For more information on naming buckets, see the Cloud Storage bucket naming guidelines. Run the following command in Cloud Shell to set a variable to your bucket name:
BUCKET_NAME="qwiklabs-gcp-02-1f29d532a3fb-enron_corpus"
Copied!
Now create the bucket by running the following command:
gsutil mb gs://${BUCKET_NAME}
Copied!
Running this command should also help to verify that you've got the gsutil command line client set up correctly, authentication is working, and you have write access to the cloud project you're operating under.

After your bucket has been created, move on to the next step to download the Enron Corpus.
Click Check my progress to verify the objective.

Create a Cloud Storage bucket.
Task 2. Review the data
The Enron Corpus is a large database of over 600,000 emails generated by 158 employees of the Enron Corporation. This data has been copied to the Cloud Storage bucket gs://enron_emails/.

Download one of the source files locally so that you can see what it looks like by running:
gsutil cp gs://enron_emails/allen-p/inbox/1. .
Copied!
Now tail the downloaded file to verify the email text is there:
tail 1.
Copied!
You should receive the following output:

Attached is the Delta position for 1/18, 1/31, 6/20, 7/16, 9/24

<< File: west_delta_pos.xls >>

Let me know if you have any questions.
This should display the contents of a plaintext mail file. There are two types of files you'll be looking for: plaintext mail files and image files. If you're interested, use the same mechanism to check out what is in those other files.

Task 3. Enable Cloud KMS
Cloud KMS is a cryptographic key management service on Google Cloud. Before using KMS you need to enable it in your project. In this lab you have been provisioned KMS should already have been enabled. You can make sure of this by using one of the gcloud CLI commands.

Run the following in your Cloud Shell session:
gcloud services enable cloudkms.googleapis.com
Copied!
Note: KMS and other services can also be enabled on your project using the Cloud Console UI as well.
You shouldn't have received any output. Cloud KMS is now enabled in your project!

Task 4. Create a Keyring and Cryptokey
In order to encrypt the data, you need to create a KeyRing and a CryptoKey. KeyRings are useful for grouping keys. Keys can be grouped by environment (like test, staging, and prod) or by some other conceptual grouping. For this lab, your KeyRing will be called test and your CryptoKey will be called qwiklab.

Run the following command in Cloud Shell to set environment variables:
KEYRING_NAME=test CRYPTOKEY_NAME=qwiklab
Copied!
Execute the gcloud command to create the KeyRing. For this lab you will be using a global location, but it could also be set to a specific region:
gcloud kms keyrings create $KEYRING_NAME --location global
Copied!
Next, using the new KeyRing, create a CryptoKey named qwiklab:
gcloud kms keys create $CRYPTOKEY_NAME --location global \
 --keyring $KEYRING_NAME \
 --purpose encryption
Copied!

Note: CryptoKeys and KeyRings cannot be deleted in Cloud KMS!

You shouldn't see any output. Just like that, you've created a KeyRing and CryptoKey!

Open the Key management through the Console by going to the Navigation menu > Security > Key Management.
The Key Management web UI allows you to view and manage your CryptoKeys and KeyRings. You will use this UI later when you manage permissions.

Click Check my progress to verify the objective.

Create a Keyring and Crypto key.
Task 5. Encrypt your data
Next, try to encrypt some data!

Take the contents of the email you looked at earlier and base64 encode it by running the following:
PLAINTEXT=$(cat 1. | base64 -w0)
Copied!
Note: Base64 encoding allows binary data to be sent to the API as plaintext. This command works for images, videos, or any other kind of binary data.
Using the encrypt endpoint, you can send the base64-encoded text you want to encrypt to the specified key.

Run the following:
curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
 -d "{\"plaintext\":\"$PLAINTEXT\"}" \
 -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
 -H "Content-Type: application/json"
Copied!
Note: The encrypt action will return a different result each time even when using the same text and key.
The response will be a JSON payload containing the encrypted text in the attribute ciphertext.

Now that your data is encrypted, you can save it to a file and upload it to your Cloud Storage bucket. To grab the encrypted text from the JSON response and save it to a file, use the command-line utility jq. The response from the previous call can be piped into jq, which can parse out the ciphertext property to the file 1.encrypted. Run the following:
curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
 -d "{\"plaintext\":\"$PLAINTEXT\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type:application/json" \
| jq .ciphertext -r > 1.encrypted
Copied!
To verify the encrypted data can be decrypted, call the decrypt endpoint to verify the decrypted text matches the original email. The encrypted data has information on which CryptoKey version was used to encrypt it, so the specific version is never supplied to the decrypt endpoint. Run the following:
curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:decrypt" \
 -d "{\"ciphertext\":\"$(cat 1.encrypted)\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type:application/json" \
| jq .plaintext -r | base64 -d
Copied!
Note: Usually decryption is performed at the application layer. For a walkthrough on how to encrypt and decrypt data in multiple programming languages, read the Cloud KMS Quickstart.
Now that you have verified the text has been encrypted successfully, upload the encrypted file to your Cloud Storage bucket.
gsutil cp 1.encrypted gs://${BUCKET_NAME}
Copied!
Click Check my progress to verify the objective.

Encrypt Your Data with the Cloud KMS key and upload it on the storage bucket.
Task 6. Configure IAM permissions
In KMS, there are two major permissions to focus on. One permissions allows a user or service account to manage KMS resources, the other allows a user or service account to use keys to encrypt and decrypt data.

The permission to manage keys is cloudkms.admin, and allows anyone with the permission to create KeyRings and create, modify, disable, and destroy CryptoKeys. The permission to encrypt and decrypt is cloudkms.cryptoKeyEncrypterDecrypter, and is used to call the encrypt and decrypt API endpoints.

For this exercise, you will use the current authorized user to assign IAM permissions.

To get the current authorized user, run the command below:
USER_EMAIL=$(gcloud auth list --limit=1 2>/dev/null | grep '@' | awk '{print $2}')
Copied!
Next, assign that user the ability to manage KMS resources. Run the following gcloud command to assign the IAM permission to manage the KeyRing you just created:
gcloud kms keyrings add-iam-policy-binding $KEYRING_NAME \
    --location global \
    --member user:$USER_EMAIL \
 --role roles/cloudkms.admin
Copied!
Since CryptoKeys belong to KeyRings, and KeyRings belong to Projects, a user with a specific role or permission at a higher level in that hierarchy inherits the same permissions on the child resources. For example, a user who has the role of Owner on a Project is also an Owner on all the KeyRings and CryptoKeys in that project. Similarly, if a user is granted the cloudkms.admin role on a KeyRing, they have the associated permissions on the CryptoKeys in that KeyRing.

Without the cloudkms.cryptoKeyEncrypterDecrypter permission, the authorized user will not be able to use the keys to encrypt or decrypt data.

Run the following gcloud command to assign the IAM permission to encrypt and decrypt data for any CryptoKey under the KeyRing you created:
gcloud kms keyrings add-iam-policy-binding $KEYRING_NAME \
    --location global \
    --member user:$USER_EMAIL \
 --role roles/cloudkms.cryptoKeyEncrypterDecrypter
Copied!
Now you can view the assigned permissions in the Cryptographic Keys section of Key Management.

Check the box by the name of the key ring (test), then click Principals in the right info panel.
This will open up a menu where you can see the accounts and permissions for the key ring you just added.

Task 7. Back up data on the command line
Now that you have an understanding of how to encrypt a single file, and have permission to do so, you can run a script to backup all files in a directory. For this example, copy all emails for allen-p, encrypt them, and upload them to a Cloud Storage bucket.

First, copy all emails for allen-p into your current working directory:
gsutil -m cp -r gs://enron_emails/allen-p .
Copied!
Now copy and paste the following into Cloud Shell to back up and encrypt all the files in the allen-p directory to your Cloud Storage bucket:
MYDIR=allen-p
FILES=$(find $MYDIR -type f -not -name "*.encrypted")
for file in $FILES; do
  PLAINTEXT=$(cat $file | base64 -w0)
  curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
 -d "{\"plaintext\":\"$PLAINTEXT\"}" \
    -H "Authorization:Bearer $(gcloud auth application-default print-access-token)" \
    -H "Content-Type:application/json" \
  | jq .ciphertext -r > $file.encrypted
done
gsutil -m cp allen-p/inbox/*.encrypted gs://${BUCKET_NAME}/allen-p/inbox
Copied!
This script loops over all the files in a given directory, encrypts them using the KMS API, and uploads them to Cloud Storage.

Click Check my progress to verify the objective.

Encrypt multiple files using KMS API and upload to Cloud Storage.
After the script completes, you can view the encrypted files when you click Storage from the Console's left menu.

To find the files, go to Navigation menu > Cloud Storage > Buckets > YOUR_BUCKET > allen-p > inbox. You should see something like this:
Bucket content

Note: Cloud Storage supports Server Side Encryption, which supports key rotation of your data and is the recommended way to encrypt data in Cloud Storage. The above example is for demonstration purposes only.
Task 8. View Cloud Audit logs
Google Cloud Audit Logging consists of two log streams, Admin Activity and Data Access, which are generated by Google Cloud services to help you answer the question "who did what, where, and when?" within your Google Cloud projects.

To view the activity for any resource in KMS, go to Navigation menu > Cloud Overview > Activity tab. This will take you to the Cloud Activity UI and then click on View Log Explorer, Select Cloud KMS Key Ring as the Resource Type and you should see the creation and all modifications made to the KeyRing.
You've now encrypted and uploaded data using KMS and Cloud Storage!

What was covered
Using IAM to manage KMS permissions.
Using KMS to encrypt data.
Using Cloud Storage to store encrypted data.
Using Cloud Audit Logging to view all activity for CryptoKeys and KeyRings.
Task 9. Test your knowledge
Test your knowledge about Cloud KMS by taking this quiz.

Cloud KMS is integrated with Cloud IAM and Cloud Audit Logging so that you can manage permissions on individual keys and monitor how these are used.
True
False

Congratulations!
You learned how to encrypt data and manage encryption keys using Cloud Key Management Service (KMS).

///////////////

student_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$ PLAINTEXT=$(cat 1. | base64 -w0)
student_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$
student_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$ curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
 -d "{\"plaintext\":\"$PLAINTEXT\"}" \
 -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
 -H "Content-Type: application/json"

- Host cloudkms.googleapis.com:443 was resolved.
- IPv6: 2404:6800:4003:c05::5f, 2404:6800:4003:c1a::5f, 2404:6800:4003:c1c::5f, 2404:6800:4003:c03::5f
- IPv4: 172.217.194.95, 74.125.200.95, 74.125.130.95, 74.125.68.95, 172.253.118.95, 64.233.170.95, 142.251.175.95, 74.125.24.95, 142.251.10.95, 142.251.12.95, 142.250.4.95
- Trying 172.217.194.95:443...
- Connected to cloudkms.googleapis.com (172.217.194.95) port 443
- ALPN: curl offers h2,http/1.1
- TLSv1.3 (OUT), TLS handshake, Client hello (1):
- CAfile: /etc/ssl/certs/ca-certificates.crt
- CApath: /etc/ssl/certs
- TLSv1.3 (IN), TLS handshake, Server hello (2):
- TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):
- TLSv1.3 (IN), TLS handshake, Certificate (11):
- TLSv1.3 (IN), TLS handshake, CERT verify (15):
- TLSv1.3 (IN), TLS handshake, Finished (20):
- TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):
- TLSv1.3 (OUT), TLS handshake, Finished (20):
- SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 / X25519 / id-ecPublicKey
- ALPN: server accepted h2
- Server certificate:
- subject: CN=upload.video.google.com
- start date: Mar 31 08:55:35 2025 GMT
- expire date: Jun 23 08:55:34 2025 GMT
- subjectAltName: host "cloudkms.googleapis.com" matched cert's "\*.googleapis.com"
- issuer: C=US; O=Google Trust Services; CN=WR2
- SSL certificate verify ok.
- Certificate level 0: Public key type EC/prime256v1 (256/128 Bits/secBits), signed using sha256WithRSAEncryption
- Certificate level 1: Public key type RSA (2048/112 Bits/secBits), signed using sha256WithRSAEncryption
- Certificate level 2: Public key type RSA (4096/152 Bits/secBits), signed using sha384WithRSAEncryption
- using HTTP/2
- [HTTP/2] [1] OPENED stream for https://cloudkms.googleapis.com/v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:encrypt
- [HTTP/2] [1] [:method: POST]
- [HTTP/2] [1] [:scheme: https]
- [HTTP/2] [1] [:authority: cloudkms.googleapis.com]
- [HTTP/2] [1] [:path: /v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:encrypt]
- [HTTP/2] [1] [user-agent: curl/8.5.0]
- [HTTP/2] [1] [accept: */*]
- [HTTP/2] [1] [authorization: Bearer ya29.a0AZYkNZhJwex_2RAQaTGEguIx2s2729S6o-4ROkWj8YLqFxpLivQI5L2hMi6qPO0xZkrjojoIjxB0ZzltxD6K4rucoaheWWZ46nkK4Yahm4-4pzwUW5rMUzd9nIFzZMg-ck2054rl1_QeRQwRLLdJmbeKIbGkVqDjMqmou4xdH8VQsNDkt72kc-PdpZiqy295DpI1FdDvI9Z_pK7Sfno9BR5AisxMVy1UNy0pft5W7uKcFCfiwFEyoQRGgSrqdYv8zyftA5eZmnTAljjF_clEpRqYBe88Cx6tYzvYJjOFAM8mDj5F2PsgigiMgkvtzqh1kNXrgaROPZ1FR7jk-BfO6HwotM_kXyodfQj48s2ZXJNgbY_1ccLS4BUJtQU-R-2mDoI7GbjMTdTi0uXOamzq3eTt6yhTN8XEb81YaCgYKAc8SARYSFQHGX2MiYokxgyWIHUtw9AARzL6JHw0427]
- [HTTP/2] [1] [content-type: application/json]
- [HTTP/2] [1] [content-length: 2384]
  > POST /v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:encrypt HTTP/2
  > Host: cloudkms.googleapis.com
  > User-Agent: curl/8.5.0
  > Accept: _/_
  > Authorization:Bearer ya29.a0AZYkNZhJwex_2RAQaTGEguIx2s2729S6o-4ROkWj8YLqFxpLivQI5L2hMi6qPO0xZkrjojoIjxB0ZzltxD6K4rucoaheWWZ46nkK4Yahm4-4pzwUW5rMUzd9nIFzZMg-ck2054rl1_QeRQwRLLdJmbeKIbGkVqDjMqmou4xdH8VQsNDkt72kc-PdpZiqy295DpI1FdDvI9Z_pK7Sfno9BR5AisxMVy1UNy0pft5W7uKcFCfiwFEyoQRGgSrqdYv8zyftA5eZmnTAljjF_clEpRqYBe88Cx6tYzvYJjOFAM8mDj5F2PsgigiMgkvtzqh1kNXrgaROPZ1FR7jk-BfO6HwotM_kXyodfQj48s2ZXJNgbY_1ccLS4BUJtQU-R-2mDoI7GbjMTdTi0uXOamzq3eTt6yhTN8XEb81YaCgYKAc8SARYSFQHGX2MiYokxgyWIHUtw9AARzL6JHw0427
  > Content-Type: application/json
  > Content-Length: 2384
  >
  > < HTTP/2 200
  > < content-type: application/json; charset=UTF-8
  > < vary: X-Origin
  > < vary: Referer
  > < vary: Origin,Accept-Encoding
  > < date: Sat, 03 May 2025 08:30:58 GMT
  > < server: ESF
  > < x-xss-protection: 0
  > < x-frame-options: SAMEORIGIN
  > < x-content-type-options: nosniff
  > < accept-ranges: none
  > <
  > {
  > "name": "projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab/cryptoKeyVersions/1",
  > "ciphertext": "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",
  > "ciphertextCrc32c": "3518786958",
  > "protectionLevel": "SOFTWARE"
  > }
- Connection #0 to host cloudkms.googleapis.com left intact
  student_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$

Now that your data is encrypted, you can save it to a file and upload it to your Cloud Storage bucket. To grab the encrypted text from the JSON response and save it to a file, use the command-line utility jq. The response from the previous call can be piped into jq, which can parse out the ciphertext property to the file 1.encrypted. Run the following:

student_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$ curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
 -d "{\"plaintext\":\"$PLAINTEXT\"}" \
 -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
 -H "Content-Type:application/json" \
| jq .ciphertext -r > 1.encrypted
% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0\* Host cloudkms.googleapis.com:443 was resolved.

- IPv6: 2404:6800:4003:c0f::5f, 2404:6800:4003:c11::5f, 2404:6800:4003:c06::5f, 2404:6800:4003:c04::5f
- IPv4: 142.251.12.95, 142.250.4.95, 172.217.194.95, 74.125.200.95, 74.125.130.95, 74.125.68.95, 172.253.118.95, 64.233.170.95, 142.251.175.95, 74.125.24.95, 142.251.10.95
- Trying 142.251.12.95:443...
- Connected to cloudkms.googleapis.com (142.251.12.95) port 443
- ALPN: curl offers h2,http/1.1
  } [5 bytes data]
- TLSv1.3 (OUT), TLS handshake, Client hello (1):
  } [512 bytes data]
- CAfile: /etc/ssl/certs/ca-certificates.crt
- CApath: /etc/ssl/certs
  { [5 bytes data]
- TLSv1.3 (IN), TLS handshake, Server hello (2):
  { [122 bytes data]
- TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):
  { [15 bytes data]
- TLSv1.3 (IN), TLS handshake, Certificate (11):
  { [4209 bytes data]
- TLSv1.3 (IN), TLS handshake, CERT verify (15):
  { [79 bytes data]
- TLSv1.3 (IN), TLS handshake, Finished (20):
  { [52 bytes data]
- TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):
  } [1 bytes data]
- TLSv1.3 (OUT), TLS handshake, Finished (20):
  } [52 bytes data]
- SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 / X25519 / id-ecPublicKey
- ALPN: server accepted h2
- Server certificate:
- subject: CN=upload.video.google.com
- start date: Mar 31 08:55:35 2025 GMT
- expire date: Jun 23 08:55:34 2025 GMT
- subjectAltName: host "cloudkms.googleapis.com" matched cert's "\*.googleapis.com"
- issuer: C=US; O=Google Trust Services; CN=WR2
- SSL certificate verify ok.
- Certificate level 0: Public key type EC/prime256v1 (256/128 Bits/secBits), signed using sha256WithRSAEncryption
- Certificate level 1: Public key type RSA (2048/112 Bits/secBits), signed using sha256WithRSAEncryption
- Certificate level 2: Public key type RSA (4096/152 Bits/secBits), signed using sha384WithRSAEncryption
  { [5 bytes data]
- using HTTP/2
- [HTTP/2] [1] OPENED stream for https://cloudkms.googleapis.com/v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:encrypt
- [HTTP/2] [1] [:method: POST]
- [HTTP/2] [1] [:scheme: https]
- [HTTP/2] [1] [:authority: cloudkms.googleapis.com]
- [HTTP/2] [1] [:path: /v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:encrypt]
- [HTTP/2] [1] [user-agent: curl/8.5.0]
- [HTTP/2] [1] [accept: */*]
- [HTTP/2] [1] [authorization: Bearer ya29.a0AZYkNZhJwex_2RAQaTGEguIx2s2729S6o-4ROkWj8YLqFxpLivQI5L2hMi6qPO0xZkrjojoIjxB0ZzltxD6K4rucoaheWWZ46nkK4Yahm4-4pzwUW5rMUzd9nIFzZMg-ck2054rl1_QeRQwRLLdJmbeKIbGkVqDjMqmou4xdH8VQsNDkt72kc-PdpZiqy295DpI1FdDvI9Z_pK7Sfno9BR5AisxMVy1UNy0pft5W7uKcFCfiwFEyoQRGgSrqdYv8zyftA5eZmnTAljjF_clEpRqYBe88Cx6tYzvYJjOFAM8mDj5F2PsgigiMgkvtzqh1kNXrgaROPZ1FR7jk-BfO6HwotM_kXyodfQj48s2ZXJNgbY_1ccLS4BUJtQU-R-2mDoI7GbjMTdTi0uXOamzq3eTt6yhTN8XEb81YaCgYKAc8SARYSFQHGX2MiYokxgyWIHUtw9AARzL6JHw0427]
- [HTTP/2] [1] [content-type: application/json]
- [HTTP/2] [1] [content-length: 2384]
  } [5 bytes data]
  > POST /v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:encrypt HTTP/2
  > Host: cloudkms.googleapis.com
  > User-Agent: curl/8.5.0
  > Accept: _/_
  > Authorization:Bearer ya29.a0AZYkNZhJwex_2RAQaTGEguIx2s2729S6o-4ROkWj8YLqFxpLivQI5L2hMi6qPO0xZkrjojoIjxB0ZzltxD6K4rucoaheWWZ46nkK4Yahm4-4pzwUW5rMUzd9nIFzZMg-ck2054rl1_QeRQwRLLdJmbeKIbGkVqDjMqmou4xdH8VQsNDkt72kc-PdpZiqy295DpI1FdDvI9Z_pK7Sfno9BR5AisxMVy1UNy0pft5W7uKcFCfiwFEyoQRGgSrqdYv8zyftA5eZmnTAljjF_clEpRqYBe88Cx6tYzvYJjOFAM8mDj5F2PsgigiMgkvtzqh1kNXrgaROPZ1FR7jk-BfO6HwotM_kXyodfQj48s2ZXJNgbY_1ccLS4BUJtQU-R-2mDoI7GbjMTdTi0uXOamzq3eTt6yhTN8XEb81YaCgYKAc8SARYSFQHGX2MiYokxgyWIHUtw9AARzL6JHw0427
  > Content-Type:application/json
  > Content-Length: 2384
  >
  > } [2384 bytes data]
  > < HTTP/2 200
  > < content-type: application/json; charset=UTF-8
  > < vary: X-Origin
  > < vary: Referer
  > < vary: Origin,Accept-Encoding
  > < date: Sat, 03 May 2025 08:32:41 GMT
  > < server: ESF
  > < x-xss-protection: 0
  > < x-frame-options: SAMEORIGIN
  > < x-content-type-options: nosniff
  > < accept-ranges: none
  > <
  > { [2693 bytes data]
  > 100 5077 0 2693 100 2384 7937 7026 --:--:-- --:--:-- --:--:-- 14976
- Connection #0 to host cloudkms.googleapis.com left intact
  student_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$

To verify the encrypted data can be decrypted, call the decrypt endpoint to verify the decrypted text matches the original email. The encrypted data has information on which CryptoKey version was used to encrypt it, so the specific version is never supplied to the decrypt endpoint. Run the following:

student_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$ curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:decrypt" \
 -d "{\"ciphertext\":\"$(cat 1.encrypted)\"}" \
 -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
 -H "Content-Type:application/json" \
| jq .plaintext -r | base64 -d

% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0\* Host cloudkms.googleapis.com:443 was resolved.

- IPv6: 2404:6800:4003:c05::5f, 2404:6800:4003:c1a::5f, 2404:6800:4003:c1c::5f, 2404:6800:4003:c03::5f
- IPv4: 74.125.130.95, 74.125.68.95, 172.253.118.95, 64.233.170.95, 142.251.175.95, 74.125.24.95, 142.251.10.95, 142.251.12.95, 142.250.4.95, 172.217.194.95, 74.125.200.95
- Trying 74.125.130.95:443...
- Connected to cloudkms.googleapis.com (74.125.130.95) port 443
- ALPN: curl offers h2,http/1.1
  } [5 bytes data]
- TLSv1.3 (OUT), TLS handshake, Client hello (1):
  } [512 bytes data]
- CAfile: /etc/ssl/certs/ca-certificates.crt
- CApath: /etc/ssl/certs
  { [5 bytes data]
- TLSv1.3 (IN), TLS handshake, Server hello (2):
  { [122 bytes data]
- TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):
  { [15 bytes data]
- TLSv1.3 (IN), TLS handshake, Certificate (11):
  { [4209 bytes data]
- TLSv1.3 (IN), TLS handshake, CERT verify (15):
  { [80 bytes data]
- TLSv1.3 (IN), TLS handshake, Finished (20):
  { [52 bytes data]
- TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):
  } [1 bytes data]
- TLSv1.3 (OUT), TLS handshake, Finished (20):
  } [52 bytes data]
- SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 / X25519 / id-ecPublicKey
- ALPN: server accepted h2
- Server certificate:
- subject: CN=upload.video.google.com
- start date: Mar 31 08:55:35 2025 GMT
- expire date: Jun 23 08:55:34 2025 GMT
- subjectAltName: host "cloudkms.googleapis.com" matched cert's "\*.googleapis.com"
- issuer: C=US; O=Google Trust Services; CN=WR2
- SSL certificate verify ok.
- Certificate level 0: Public key type EC/prime256v1 (256/128 Bits/secBits), signed using sha256WithRSAEncryption
- Certificate level 1: Public key type RSA (2048/112 Bits/secBits), signed using sha256WithRSAEncryption
- Certificate level 2: Public key type RSA (4096/152 Bits/secBits), signed using sha384WithRSAEncryption
  { [5 bytes data]
- using HTTP/2
- [HTTP/2] [1] OPENED stream for https://cloudkms.googleapis.com/v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:decrypt
- [HTTP/2] [1] [:method: POST]
- [HTTP/2] [1] [:scheme: https]
- [HTTP/2] [1] [:authority: cloudkms.googleapis.com]
- [HTTP/2] [1] [:path: /v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:decrypt]
- [HTTP/2] [1] [user-agent: curl/8.5.0]
- [HTTP/2] [1] [accept: */*]
- [HTTP/2] [1] [authorization: Bearer ya29.a0AZYkNZhJwex_2RAQaTGEguIx2s2729S6o-4ROkWj8YLqFxpLivQI5L2hMi6qPO0xZkrjojoIjxB0ZzltxD6K4rucoaheWWZ46nkK4Yahm4-4pzwUW5rMUzd9nIFzZMg-ck2054rl1_QeRQwRLLdJmbeKIbGkVqDjMqmou4xdH8VQsNDkt72kc-PdpZiqy295DpI1FdDvI9Z_pK7Sfno9BR5AisxMVy1UNy0pft5W7uKcFCfiwFEyoQRGgSrqdYv8zyftA5eZmnTAljjF_clEpRqYBe88Cx6tYzvYJjOFAM8mDj5F2PsgigiMgkvtzqh1kNXrgaROPZ1FR7jk-BfO6HwotM_kXyodfQj48s2ZXJNgbY_1ccLS4BUJtQU-R-2mDoI7GbjMTdTi0uXOamzq3eTt6yhTN8XEb81YaCgYKAc8SARYSFQHGX2MiYokxgyWIHUtw9AARzL6JHw0427]
- [HTTP/2] [1] [content-type: application/json]
- [HTTP/2] [1] [content-length: 2497]
  } [5 bytes data]
  > POST /v1/projects/qwiklabs-gcp-02-1f29d532a3fb/locations/global/keyRings/test/cryptoKeys/qwiklab:decrypt HTTP/2
  > Host: cloudkms.googleapis.com
  > User-Agent: curl/8.5.0
  > Accept: _/_
  > Authorization:Bearer ya29.a0AZYkNZhJwex_2RAQaTGEguIx2s2729S6o-4ROkWj8YLqFxpLivQI5L2hMi6qPO0xZkrjojoIjxB0ZzltxD6K4rucoaheWWZ46nkK4Yahm4-4pzwUW5rMUzd9nIFzZMg-ck2054rl1_QeRQwRLLdJmbeKIbGkVqDjMqmou4xdH8VQsNDkt72kc-PdpZiqy295DpI1FdDvI9Z_pK7Sfno9BR5AisxMVy1UNy0pft5W7uKcFCfiwFEyoQRGgSrqdYv8zyftA5eZmnTAljjF_clEpRqYBe88Cx6tYzvYJjOFAM8mDj5F2PsgigiMgkvtzqh1kNXrgaROPZ1FR7jk-BfO6HwotM_kXyodfQj48s2ZXJNgbY_1ccLS4BUJtQU-R-2mDoI7GbjMTdTi0uXOamzq3eTt6yhTN8XEb81YaCgYKAc8SARYSFQHGX2MiYokxgyWIHUtw9AARzL6JHw0427
  > Content-Type:application/json
  > Content-Length: 2497
  >
  > } [2497 bytes data]
  > < HTTP/2 200
  > < content-type: application/json; charset=UTF-8
  > < vary: X-Origin
  > < vary: Referer
  > < vary: Origin,Accept-Encoding
  > < date: Sat, 03 May 2025 08:33:45 GMT
  > < server: ESF
  > < x-xss-protection: 0
  > < x-frame-options: SAMEORIGIN
  > < x-content-type-options: nosniff
  > < accept-ranges: none
  > <
  > { [2481 bytes data]
  > 100 4978 0 2481 100 2497 7920 7971 --:--:-- --:--:-- --:--:-- 15904
- Connection #0 to host cloudkms.googleapis.com left intact
  Message-ID: <16159836.1075855377439.JavaMail.evans@thyme>
  Date: Fri, 7 Dec 2001 10:06:42 -0800 (PST)
  From: heather.dunton@enron.com
  To: k..allen@enron.com
  Subject: RE: West Position
  Mime-Version: 1.0
  Content-Type: text/plain; charset=us-ascii
  Content-Transfer-Encoding: 7bit
  X-From: Dunton, Heather </O=ENRON/OU=NA/CN=RECIPIENTS/CN=HDUNTON>
  X-To: Allen, Phillip K. </O=ENRON/OU=NA/CN=RECIPIENTS/CN=Pallen>
  X-cc:
  X-bcc:
  X-Folder: \Phillip_Allen_Jan2002_1\Allen, Phillip K.\Inbox
  X-Origin: Allen-P
  X-FileName: pallen (Non-Privileged).pst

Please let me know if you still need Curve Shift.

Thanks,
Heather
-----Original Message-----
From: Allen, Phillip K.  
Sent: Friday, December 07, 2001 5:14 AM
To: Dunton, Heather
Subject: RE: West Position

Heather,

Did you attach the file to this email?

-----Original Message-----
From: Dunton, Heather  
Sent: Wednesday, December 05, 2001 1:43 PM
To: Allen, Phillip K.; Belden, Tim
Subject: FW: West Position

Attached is the Delta position for 1/16, 1/30, 6/19, 7/13, 9/21

-----Original Message-----
From: Allen, Phillip K.  
Sent: Wednesday, December 05, 2001 6:41 AM
To: Dunton, Heather
Subject: RE: West Position

Heather,

This is exactly what we need. Would it possible to add the prior day for each of the dates below to the pivot table. In order to validate the curve shift on the dates below we also need the prior days ending positions.

Thank you,

Phillip Allen

-----Original Message-----
From: Dunton, Heather  
Sent: Tuesday, December 04, 2001 3:12 PM
To: Belden, Tim; Allen, Phillip K.
Cc: Driscoll, Michael M.
Subject: West Position

Attached is the Delta position for 1/18, 1/31, 6/20, 7/16, 9/24

<< File: west_delta_pos.xls >>

Let me know if you have any questions.

Heatherstudent_02_e4b24d331200@cloudshell:~ (qwiklabs-gcp-02-1f29d532a3fb)$

store into the cloud storage bucket:

gsutil cp 1.encrypted gs://${BUCKET_NAME}
